;; ================================================
;;      SUMO (Suggested Upper Merged Ontology)
;; ================================================                                            

;; The original versions of SUMO incorporated elements from many public sources
;; which are documented at http://www.ontologyportal.org/SUMOhistory/

;; The SUMO is freely available, subject to the following IEEE license.  

;; ----------------------
;; Copyright ï¿½ 2004 by the Institute of Electrical and Electronics Engineers, Inc.
;; Three Park Avenue
;; New York, NY 10016-5997, USA
;; All rights reserved.
          
;; 1. COPYRIGHT
;; The Institute of Electrical and Electronics Engineers, Inc., ("IEEE") owns the         
;; copyright to this Document in all forms of media. Copyright in the text retrieved,     
;; displayed or output from this Document is owned by IEEE and is protected by the        
;; copyright laws of the United States and by international treaties. The IEEE reserves   
;; all rights not expressly granted herein.

;; 2. ROYALTIES
;; The IEEE is providing the Document at no charge. However, the Document is not to be    
;; considered "Public Domain," as the IEEE is, and at all times shall remain, the sole    
;; copyright holder in the Document. The IEEE intends to revise the Document from time to 
;; time; the latest version shall be available at http://standards.ieee.org/catalog/

;; 3. TERMS OF USE
;; The IEEE hereby grants Licensee a perpetual, non-exclusive, royalty-free, world-wide   
;; right and license to copy, publish and distribute the Document in any way, and to      
;; prepare derivative works that are based on or incorporate all or part of the Document  
;; provided that the IEEE is appropriately acknowledged as the source and copyright owner 
;; in each and every use.

;; 4. LIMITED WARRANTIES & LIMITATIONS OF REMEDIES
;; LICENSOR Does not warrant or represent the accuracy or content of the document and     
;; Expressly Disclaims any Express or Implied Warranty, including any Implied Warranty of 
;; Merchantability or Fitness for a Specific Purpose or that the use of the document is   
;; free from patent infringement. The document is supplied ONLY "AS IS."                  
;; ----------------------

;; The SUMO was initially developed at Teknowledge Corp.

;; Any questions or comments about this ontology can be directed to the
;; Technical editor, Adam Pease, apease [at] articulatesoftware [dot] com  

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; The knowledge representation language in which the SUMO is expressed is SUO-KIF, 
;; which stands for "Standard Upper Ontology - Knowledge Interchange Format".  SUO-KIF 
;; is a simplified form of the popular KIF knowledge representation language.  A 
;; specification of SUO-KIF can be found at:  http://www.ontologyportal.org

;; The SUMO is a modular ontology.  That is, the ontology is divided into 
;; self-contained subontologies.  Each subontology is indicated by a section 
;; header, and the dependencies between the subontologies are specified with 
;; statements of the form ";; INCLUDES '<SUBONTOLOGY>'".  These statements are 
;; found at the beginning of each section.  

;; We ask the people using or referencing SUMO cite our primary paper:

;; Niles, I., and Pease, A.  2001.  Towards a Standard Upper Ontology.  In 
;; Proceedings of the 2nd International Conference on Formal Ontology in 
;; Information Systems (FOIS-2001), Chris Welty and Barry Smith, eds, 
;; Ogunquit, Maine, October 17-19, 2001.  Also see http://www.ontologyportal.org

;; BEGIN FILE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;   STRUCTURAL ONTOLOGY   ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; INCLUDES 'BASE ONTOLOGY'

;; The Structural Ontology consists of definitions of certain syntactic 
;; abbreviations that can be both heuristically useful and computationally 
;; advantageous.

(instance instance BinaryPredicate)
(domain instance 1 Entity)
(domain instance 2 SetOrClass)

(documentation instance EnglishLanguage "An object is an &%instance of a &%SetOrClass if
it is included in that &%SetOrClass.  An individual may be an &%instance of many
classes, some of which may be subclasses of others.  Thus, there is no
assumption in the meaning of &%instance about specificity or uniqueness.")

(subrelation immediateInstance instance)
(instance immediateInstance AsymmetricRelation)
(instance immediateInstance IntransitiveRelation)
(instance immediateInstance TotalValuedRelation)
(documentation immediateInstance EnglishLanguage "An object is an &%immediateInstance of
a &%SetOrClass if it is an &%instance of the &%SetOrClass and it is not an
&%instance of a proper subclass of &%SetOrClass.")

(=>
   (immediateInstance ?ENTITY ?CLASS)
   (not (exists (?SUBCLASS)
      (and
         (subclass ?SUBCLASS ?CLASS)
         (not (equal ?SUBCLASS ?CLASS))
         (instance ?ENTITY ?SUBCLASS)))))

(instance inverse BinaryPredicate)
(instance inverse IrreflexiveRelation)
(instance inverse IntransitiveRelation)
(instance inverse SymmetricRelation)
(instance inverse PartialValuedRelation)
(domain inverse 1 BinaryRelation)
(domain inverse 2 BinaryRelation)
(documentation inverse EnglishLanguage "The inverse of a &%BinaryRelation is a &%Relation
in which all the tuples of the original &%Relation are reversed.  In other words, one
&%BinaryRelation is the inverse of another if they are equivalent when their arguments
are swapped.")

; causes a predicate variable expansion explosion
; (=>
;    (and
;      (inverse ?REL1 ?REL2)
;      (instance ?REL1 Predicate)
;      (instance ?REL2 Predicate))
;    (forall (?INST1 ?INST2)
;       (<=>
;          (?REL1 ?INST1 ?INST2)
;          (?REL2 ?INST2 ?INST1))))

(instance subclass BinaryPredicate)
(instance subclass PartialOrderingRelation)
(domain subclass 1 SetOrClass)
(domain subclass 2 SetOrClass)
(documentation subclass EnglishLanguage "(&%subclass ?CLASS1 ?CLASS2) means that ?CLASS1
is a &%subclass of ?CLASS2, i.e. every &%instance of ?CLASS1 is also an &%instance of
?CLASS2.  A &%Class may have multiple superclasses and subclasses.")

(=>
  (subclass ?X ?Y)
  (and
    (instance ?X SetOrClass)
    (instance ?Y SetOrClass)))

(=>
  (and
    (subclass ?X ?Y)
    (instance ?Z ?X))
  (instance ?Z ?Y))

; (subrelation immediateSubclass subclass)
(instance immediateSubclass AsymmetricRelation)
(instance immediateSubclass IntransitiveRelation)
(domain immediateSubclass 1 SetOrClass)
(domain immediateSubclass 2 SetOrClass)
(documentation immediateSubclass EnglishLanguage "A &%SetOrClass ?CLASS1 is an
&%immediateSubclass of another &%SetOrClass ?CLASS2 just in case ?CLASS1 is a subclass of
?CLASS2 and there is no other subclass of ?CLASS2 such that ?CLASS1 is also a subclass of
it.")

(=>
   (immediateSubclass ?CLASS1 ?CLASS2)
   (not (exists (?CLASS3)
      (and
         (subclass ?CLASS3 ?CLASS2)
         (subclass ?CLASS1 ?CLASS3)
         (not (equal ?CLASS2 ?CLASS3))
         (not (equal ?CLASS1 ?CLASS3))))))

(instance subrelation BinaryPredicate)
(instance subrelation PartialOrderingRelation)
(domain subrelation 1 Relation)
(domain subrelation 2 Relation)
(documentation subrelation EnglishLanguage "(&%subrelation ?REL1 ?REL2) means that
every tuple of ?REL1 is also a tuple of ?REL2.  In other words, if
the &%Relation ?REL1 holds for some arguments arg_1, arg_2, ... arg_n,
then the &%Relation ?REL2 holds for the same arguments.  A consequence
of this is that a &%Relation and its subrelations must have the same
&%valence.")

(=>
   (and
      (subrelation ?PRED1 ?PRED2)
      (valence ?PRED1 ?NUMBER))
   (valence ?PRED2 ?NUMBER))

(=>
   (and
      (subrelation ?PRED1 ?PRED2)
      (domain ?PRED2 ?NUMBER ?CLASS1))
   (domain ?PRED1 ?NUMBER ?CLASS1))

(=>
   (and
      (subrelation ?REL1 ?REL2)
      (instance ?REL1 Predicate)
      (instance ?REL2 Predicate)
      (?REL1 @ROW))
   (?REL2 @ROW))

(=>
   (and
      (subrelation ?PRED1 ?PRED2)
      (instance ?PRED2 ?CLASS)
      (subclass ?CLASS InheritableRelation))
   (instance ?PRED1 ?CLASS))

(instance domain TernaryPredicate)
(domain domain 1 Relation)
(domain domain 2 PositiveInteger)
(domain domain 3 SetOrClass)
(documentation domain EnglishLanguage "Provides a computationally and heuristically
convenient mechanism for declaring the argument types of a given relation.
The formula (&%domain ?REL ?INT ?CLASS) means that the ?INT'th element of each
tuple in the relation ?REL must be an instance of ?CLASS.  Specifying argument
types is very helpful in maintaining ontologies.  Representation systems can
use these specifications to classify terms and check integrity constraints.
If the restriction on the argument type of a &%Relation is not captured by a
&%SetOrClass already defined in the ontology, one can specify a &%SetOrClass
compositionally with the functions &%UnionFn, &%IntersectionFn, etc.")

(=>
   (and
      (domain ?REL ?NUMBER ?CLASS1)
      (domain ?REL ?NUMBER ?CLASS2))
   (or
      (subclass ?CLASS1 ?CLASS2)
      (subclass ?CLASS2 ?CLASS1)))

(instance domainSubclass TernaryPredicate)
(domain domainSubclass 1 Relation)
(domain domainSubclass 2 PositiveInteger)
(domain domainSubclass 3 SetOrClass)
(documentation domainSubclass EnglishLanguage "A &%Predicate that is used to specify
argument type restrictions of &%Predicates.  The formula (&%domainSubclass
?REL ?INT ?CLASS) means that the ?INT'th element of each tuple in the
relation ?REL must be a subclass of ?CLASS.")

(=>
   (and
      (subrelation ?REL1 ?REL2)
      (domainSubclass ?REL2 ?NUMBER ?CLASS1))
   (domainSubclass ?REL1 ?NUMBER ?CLASS1))

(=>
   (and
      (domainSubclass ?REL ?NUMBER ?CLASS1)
      (domainSubclass ?REL ?NUMBER ?CLASS2))
   (or
      (subclass ?CLASS1 ?CLASS2)
      (subclass ?CLASS2 ?CLASS1)))

(instance equal BinaryPredicate)
(instance equal EquivalenceRelation)
(instance equal RelationExtendedToQuantities)
(domain equal 1 Entity)
(domain equal 2 Entity)
(documentation equal EnglishLanguage "(equal ?ENTITY1 ?ENTITY2) is true just in case
?ENTITY1 is identical with ?ENTITY2.")

(=>
   (equal ?THING1 ?THING2)
   (forall (?ATTR)
      (<=>
         (property ?THING1 ?ATTR)
         (property ?THING2 ?ATTR))))

(=>
   (equal ?ATTR1 ?ATTR2)
   (forall (?THING)
      (<=>
         (property ?THING ?ATTR1)
         (property ?THING ?ATTR2))))

(=>
   (equal ?THING1 ?THING2)
   (forall (?CLASS)
      (<=>
         (instance ?THING1 ?CLASS)
         (instance ?THING2 ?CLASS))))

(=>
   (equal ?CLASS1 ?CLASS2)
   (forall (?THING)
      (<=>
         (instance ?THING ?CLASS1)
         (instance ?THING ?CLASS2))))

;;(=>
;;   (equal ?REL1 ?REL2)
;;   (forall (@ROW)
;;      (<=>
;;         (?REL1 @ROW)
;;         (?REL2 @ROW))))

(=>
   (equal ?LIST1 ?LIST2)
      (=>
         (and
            (equal ?LIST1 (ListFn @ROW1))
            (equal ?LIST2 (ListFn @ROW2)))
         (forall (?NUMBER)
            (equal (ListOrderFn (ListFn @ROW1) ?NUMBER) (ListOrderFn (ListFn @ROW2) ?NUMBER)))))

(instance range BinaryPredicate)
(instance range AsymmetricRelation)
(domain range 1 Function)
(domain range 2 SetOrClass)
(documentation range EnglishLanguage "Gives the range of a function.  In other words,
(&%range ?FUNCTION ?CLASS) means that all of the values assigned by
?FUNCTION are &%instances of ?CLASS.")

(=>
   (and
      (range ?FUNCTION ?CLASS)
      (equal (AssignmentFn ?FUNCTION @ROW) ?VALUE))
   (instance ?VALUE ?CLASS))

(=>
   (and
      (subrelation ?REL1 ?REL2)
      (range ?REL2 ?CLASS1))
   (range ?REL1 ?CLASS1))

(=>
   (and
      (range ?REL ?CLASS1)
      (range ?REL ?CLASS2))
   (or
      (subclass ?CLASS1 ?CLASS2)
      (subclass ?CLASS2 ?CLASS1)))

(instance rangeSubclass BinaryPredicate)
(instance rangeSubclass AsymmetricRelation)
(domain rangeSubclass 1 Function)
(domainSubclass rangeSubclass 2 SetOrClass)
(documentation rangeSubclass EnglishLanguage "(&%rangeSubclass ?FUNCTION ?CLASS) means
that all of the values assigned by ?FUNCTION are &%subclasses of ?CLASS.")

(=>
   (and
      (rangeSubclass ?FUNCTION ?CLASS)
      (equal (AssignmentFn ?FUNCTION @ROW) ?VALUE))
   (subclass ?VALUE ?CLASS))

(=>
   (and
      (subrelation ?REL1 ?REL2)
      (rangeSubclass ?REL2 ?CLASS1))
   (rangeSubclass ?REL1 ?CLASS1))

(=>
   (and
      (rangeSubclass ?REL ?CLASS1)
      (rangeSubclass ?REL ?CLASS2))
   (or
      (subclass ?CLASS1 ?CLASS2)
      (subclass ?CLASS2 ?CLASS1)))

(instance valence BinaryPredicate)
(instance valence AsymmetricRelation)
(instance valence SingleValuedRelation)
(domain valence 1 Relation)
(domain valence 2 PositiveInteger)
(documentation valence EnglishLanguage "Specifies the number of arguments that a
relation can take.  If a relation does not have a fixed number of
arguments, it does not have a valence and it is an instance of
&%VariableArityRelation.")

(instance documentation TernaryPredicate)
(domain documentation 1 Entity)
(domain documentation 2 HumanLanguage)
(domain documentation 3 SymbolicString)

(documentation documentation EnglishLanguage "A relation between objects
in the domain of discourse and strings of natural language text stated in
a particular &%HumanLanguage.  The domain of &%documentation is not
constants (names), but the objects themselves.  This means that one does
not quote the names when associating them with their documentation.")

(instance format TernaryPredicate)
(domain format 1 Language)
(domain format 2 Entity)
(domain format 3 SymbolicString)
(documentation format EnglishLanguage "A relation that specifies how
to present an expression in a natural language format.")

(instance termFormat TernaryPredicate)
(domain termFormat 1 Language)
(domain termFormat 2 Entity)
(domain termFormat 3 SymbolicString)
(documentation termFormat EnglishLanguage "A relation that specifies how
to present a term in a natural language format.")

(instance disjoint BinaryPredicate)
(instance disjoint SymmetricRelation)
(domain disjoint 1 SetOrClass)
(domain disjoint 2 SetOrClass)
(documentation disjoint EnglishLanguage "&%Classes are &%disjoint only if they share no
instances, i.e. just in case the result of applying &%IntersectionFn to
them is empty.")

(=>
   (disjoint ?CLASS1 ?CLASS2)
   (forall (?INST)
     (not
       (and
         (instance ?INST ?CLASS1)
         (instance ?INST ?CLASS2)))))

(instance disjointRelation BinaryPredicate)
(instance disjointRelation IrreflexiveRelation)
(instance disjointRelation PartialValuedRelation)
(domain disjointRelation 1 Relation)
(domain disjointRelation 2 Relation)
(relatedInternalConcept disjointRelation disjoint)
(documentation disjointRelation EnglishLanguage "This predicate relates two &%Relations.
(&%disjointRelation ?REL1 ?REL2) means that the two relations have no tuples in
common.")

(=>
   (and
      (domain ?REL1 ?NUMBER ?CLASS1)
      (domain ?REL2 ?NUMBER ?CLASS2)
      (disjoint ?CLASS1 ?CLASS2))
   (disjointRelation ?REL1 ?REL2))

(=>
   (and
      (domainSubclass ?REL1 ?NUMBER ?CLASS1)
      (domainSubclass ?REL2 ?NUMBER ?CLASS2)
      (disjoint ?CLASS1 ?CLASS2))
   (disjointRelation ?REL1 ?REL2))

(=>
   (and
      (range ?REL1 ?CLASS1)
      (range ?REL2 ?CLASS2)
      (disjoint ?CLASS1 ?CLASS2))
   (disjointRelation ?REL1 ?REL2))

(=>
   (and
      (rangeSubclass ?REL1 ?CLASS1)
      (rangeSubclass ?REL2 ?CLASS2)
      (disjoint ?CLASS1 ?CLASS2))
   (disjointRelation ?REL1 ?REL2))

(=>
   (and
      (instance ?REL1 Predicate)
      (instance ?REL2 Predicate)
      (disjointRelation ?REL1 ?REL2)
      (?REL1 @ROW2))
   (not (?REL2 @ROW2)))

(instance contraryAttribute Predicate)
(instance contraryAttribute VariableArityRelation)
(domain contraryAttribute 1 Attribute)

(documentation contraryAttribute EnglishLanguage "A &%contraryAttribute is a set of &%Attributes
such that something can not simultaneously have more than one of these &%Attributes.
For example, (&%contraryAttribute &%Pliable &%Rigid) means that nothing can be both
&%Pliable and &%Rigid.")

(=>
   (contraryAttribute @ROW)
   (=>
      (inList ?ELEMENT (ListFn @ROW))
      (instance ?ELEMENT Attribute)))

(=>
   (and
      (contraryAttribute @ROW1)
      (identicalListItems (ListFn @ROW1) (ListFn @ROW2)))
   (contraryAttribute @ROW2))

(=>
   (contraryAttribute @ROW)
   (forall (?ATTR1 ?ATTR2)
      (=>
         (and
            (equal ?ATTR1 (ListOrderFn (ListFn @ROW) ?NUMBER1))
            (equal ?ATTR2 (ListOrderFn (ListFn @ROW) ?NUMBER2))
            (not (equal ?NUMBER1 ?NUMBER2)))
         (=>
            (property ?OBJ ?ATTR1)
            (not (property ?OBJ ?ATTR2))))))

(instance exhaustiveAttribute Predicate)
(instance exhaustiveAttribute VariableArityRelation)
(domainSubclass exhaustiveAttribute 1 Attribute)
(domain exhaustiveAttribute 2 Attribute)

(documentation exhaustiveAttribute EnglishLanguage "This predicate relates a &%Class to a
set of &%Attributes, and it means that the elements of this set exhaust the
instances of the &%Class.  For example, (&%exhaustiveAttribute &%PhysicalState
&%Solid &%Fluid &%Liquid &%Gas &%Plasma) means that there are only five instances of
the class &%PhysicalState, viz. &%Solid, &%Fluid, &%Liquid, &%Gas and &%Plasma.")

(=>
  (and
    (exhaustiveAttribute ?CLASS @ROW)
    (inList ?ATTR (ListFn @ROW)))
  (instance ?ATTR Attribute))

(=>
  (and
    (exhaustiveAttribute ?CLASS @ROW)
    (inList ?ATTR (ListFn @ROW)))
  (instance ?ATTR ?CLASS))
  
(=>
   (exhaustiveAttribute ?CLASS @ROW)
   (forall (?ATTR1)
      (=>
         (instance ?ATTR1 ?CLASS)
         (exists (?ATTR2)
            (and
               (inList ?ATTR2 (ListFn @ROW))
               (equal ?ATTR1 ?ATTR2))))))

(=>
   (exhaustiveAttribute ?ATTRCLASS @ROW)
   (not
     (exists (?EL)
       (and
         (instance ?EL ?ATTRCLASS)
         (not
           (exists (?ATTR ?NUMBER)
             (and
               (equal ?EL ?ATTR)
               (equal ?ATTR
                 (ListOrderFn
                   (ListFn @ROW) ?NUMBER)))))))))

(=>
   (exhaustiveAttribute ?CLASS @ROW)
   (=>
      (equal ?ATTR1
        (ListOrderFn (ListFn @ROW) ?N1))
      (not
        (exists (?ATTR2 ?N2)
            (and
              (equal ?ATTR1 ?ATTR2)
              (not
                 (equal ?N1 ?N2)))))))

(instance exhaustiveDecomposition Predicate)
(instance exhaustiveDecomposition VariableArityRelation)
(domain exhaustiveDecomposition 1 Class)
(domain exhaustiveDecomposition 2 Class)
(relatedInternalConcept exhaustiveDecomposition partition)

(documentation exhaustiveDecomposition EnglishLanguage "An &%exhaustiveDecomposition of a
&%Class C is a set of subclasses of C such that every instance of C is an
instance of one of the subclasses in the set.  Note:  this does not necessarily
mean that the elements of the set are disjoint (see &%partition - a &%partition
is a disjoint exhaustive decomposition).")

(=>
   (exhaustiveDecomposition @ROW)
   (=>
      (inList ?ELEMENT (ListFn @ROW))
      (instance ?ELEMENT Class)))

(instance disjointDecomposition Predicate)
(instance disjointDecomposition VariableArityRelation)
(domain disjointDecomposition 1 Class)
(domain disjointDecomposition 2 Class)
(relatedInternalConcept disjointDecomposition exhaustiveDecomposition)
(relatedInternalConcept disjointDecomposition disjoint)

(documentation disjointDecomposition EnglishLanguage "A &%disjointDecomposition of a
&%Class C is a set of subclasses of C that are mutually &%disjoint.")

(=>
   (disjointDecomposition @ROW)
   (=>
      (inList ?ELEMENT (ListFn @ROW))
      (instance ?ELEMENT Class)))

(instance partition Predicate)
(instance partition VariableArityRelation)
(domain partition 1 Class)
(domain partition 2 Class)

(documentation partition EnglishLanguage "A &%partition of a &%Class C
is a set of mutually &%disjoint classes (a subclass partition) which
covers C.  Every instance of C is an instance of exactly one of the
subclasses in the partition.")

(<=>
   (partition @ROW)
   (and
      (exhaustiveDecomposition @ROW)
      (disjointDecomposition @ROW)))

(instance relatedInternalConcept BinaryPredicate)
(instance relatedInternalConcept EquivalenceRelation)
(domain relatedInternalConcept 1 Entity)
(domain relatedInternalConcept 2 Entity)

(documentation relatedInternalConcept EnglishLanguage "Means that the two arguments are
related concepts within the SUMO, i.e. there is a significant similarity
of meaning between them.  To indicate a meaning relation between a SUMO
concept and a concept from another source, use the Predicate
&%relatedExternalConcept.")

(instance relatedExternalConcept TernaryPredicate)
(domain relatedExternalConcept 1 SymbolicString)
(domain relatedExternalConcept 2 Entity)
(domain relatedExternalConcept 3 Language)
(relatedInternalConcept relatedExternalConcept relatedInternalConcept)

(documentation relatedExternalConcept EnglishLanguage "Used to signify a three-place
relation between a concept in an external knowledge source, a concept
in the SUMO, and the name of the other knowledge source.")

(subrelation synonymousExternalConcept relatedExternalConcept)
(instance synonymousExternalConcept TernaryPredicate)
(disjointRelation synonymousExternalConcept subsumedExternalConcept)
(disjointRelation synonymousExternalConcept subsumingExternalConcept)
(disjointRelation subsumedExternalConcept subsumingExternalConcept)

(documentation synonymousExternalConcept EnglishLanguage "(&%synonymousExternalConcept
?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING has the
same meaning as ?STRING in ?LANGUAGE.")

(subrelation subsumingExternalConcept relatedExternalConcept)
(instance subsumingExternalConcept TernaryPredicate)

(documentation subsumingExternalConcept EnglishLanguage "(&%subsumingExternalConcept
?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING subsumes
the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is broader
in meaning than ?STRING.")

(subrelation subsumedExternalConcept relatedExternalConcept)
(instance subsumedExternalConcept TernaryPredicate)

(documentation subsumedExternalConcept EnglishLanguage "(&%subsumedExternalConcept
?STRING ?THING ?LANGUAGE) means that the SUMO concept ?THING is subsumed
by the meaning of ?STRING in ?LANGUAGE, i.e. the concept ?THING is narrower
in meaning than ?STRING.")

(instance externalImage BinaryPredicate)

(documentation externalImage EnglishLanguage "A link between an Entity and a
URL that represents or exemplifies the term in some way.")

(domain externalImage 1 Entity)
(domain externalImage 2 SymbolicString)

(instance subAttribute BinaryPredicate)
(instance subAttribute PartialOrderingRelation)
(domain subAttribute 1 Attribute)
(domain subAttribute 2 Attribute)
(disjointRelation subAttribute successorAttribute)

(documentation subAttribute EnglishLanguage "Means that the second argument can be
ascribed to everything which has the first argument ascribed to it.")

(=>
   (subAttribute ?ATTR1 ?ATTR2)
   (forall (?OBJ)
      (=>
         (property ?OBJ ?ATTR1)
         (property ?OBJ ?ATTR2))))

(=>
   (and
      (subAttribute ?ATTR1 ?ATTR2)
      (instance ?ATTR2 ?CLASS))
   (instance ?ATTR1 ?CLASS))

(instance successorAttribute BinaryPredicate)
(instance successorAttribute AsymmetricRelation)
(domain successorAttribute 1 Attribute)
(domain successorAttribute 2 Attribute)

(documentation successorAttribute EnglishLanguage "(&%successorAttribute ?ATTR1 ?ATTR2)
means that ?ATTR2 is the &%Attribute that comes immediately after ?ATTR1
on the scale that they share.")

(=>
   (and
      (successorAttribute ?ATTR1 ?ATTR2)
      (holdsDuring ?TIME1 (property ?ENTITY ?ATTR2)))
   (exists (?TIME2)
      (and
         (temporalPart ?TIME2 (PastFn ?TIME1))
         (holdsDuring ?TIME2 (property ?ENTITY ?ATTR1)))))

(instance successorAttributeClosure BinaryPredicate)
(instance successorAttributeClosure TransitiveRelation)
(instance successorAttributeClosure IrreflexiveRelation)
(instance successorAttributeClosure PartialValuedRelation)
(domain successorAttributeClosure 1 Attribute)
(domain successorAttributeClosure 2 Attribute)
(relatedInternalConcept successorAttributeClosure successorAttribute)

(documentation successorAttributeClosure EnglishLanguage "The transitive closure of
&%successorAttribute.  (&%successorAttributeClosure ?ATTR1 ?ATTR2) means
that there is a chain of &%successorAttribute assertions connecting
?ATTR1 and ?ATTR2.")

(=>
   (successorAttribute ?ATTR1 ?ATTR2)
   (successorAttributeClosure ?ATTR1 ?ATTR2))

(instance greaterThanByQuality TernaryPredicate)

(documentation greaterThanByQuality EnglishLanguage "(greaterThanByQuality
?ENTITY1 ?ENTITY2 ?ATT) means that ?ENTITY1 has more of the given
quality ?ATT than ?ENTITY2.")

(domain greaterThanByQuality 1 Entity)
(domain greaterThanByQuality 2 Entity)
(domain greaterThanByQuality 3 Attribute)

(=>
  (and
    (greaterThanByQuality ?E1 ?E2 ?ATT)
    (greaterThanByQuality ?E2 ?E3 ?ATT))
  (greaterThanByQuality ?E1 ?E3 ?ATT))

(=>
  (greaterThanByQuality ?E1 ?E2 ?ATT)
  (not
    (greaterThanByQuality ?E2 ?E1 ?ATT)))

(=>
  (greaterThanByQuality ?E1 ?E2 ?ATT)
  (not
    (equal ?E2 ?E1)))

(instance entails BinaryPredicate)
(domain entails 1 Formula)
(domain entails 2 Formula)

(documentation entails EnglishLanguage "The operator of logical entailment.  (&%entails
?FORMULA1 ?FORMULA2) means that ?FORMULA2 can be derived from ?FORMULA1
by means of the proof theory of SUO-KIF.")

;; The following axiom is commented out, because it is rejected by the
;; inference engine parser.

;;(=>
;;   (entails ?FORMULA1 ?FORMULA2)
;;   (=> ?FORMULA1 ?FORMULA2))

(instance AssignmentFn Function)
(instance AssignmentFn VariableArityRelation)
(domain AssignmentFn 1 Function)
(domain AssignmentFn 2 Entity)
(range AssignmentFn Entity)

(documentation AssignmentFn EnglishLanguage "If F is a &%Function with a value for the
objects denoted by N1,..., NK, then (&%AssignmentFn F N1 ... NK) is the
value of applying F to the objects denoted by N1,..., NK.  Otherwise,
the value is undefined.")

(instance PowerSetFn UnaryFunction)
(instance PowerSetFn TotalValuedRelation)
(domain PowerSetFn 1 SetOrClass)
(rangeSubclass PowerSetFn SetOrClass)

(documentation PowerSetFn EnglishLanguage "(&%PowerSetFn ?CLASS) maps the &%SetOrClass
?CLASS to the &%SetOrClass of all &%subclasses of ?CLASS.")

;; END FILE

;; BEGIN FILE

;;;;;;;;;;;;;;;;;;;;;;;
;;   BASE ONTOLOGY   ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; INCLUDES 'STRUCTURAL ONTOLOGY'

;; The following hierarchy incorporates content from Sowa, Russell & Norvig,
;; and the top-level ontology from ITBM-CNR.

(partition Entity Physical Abstract)
(documentation Entity EnglishLanguage "The universal class of individuals.  This is the root
node of the ontology.")

;; Informally, it is true that "Everything is Entity";
;; We comment out this axiom to avoid logical paradoxes.
;;(forall (?THING)
;;  (instance ?THING Entity))

(exists (?THING)
  (instance ?THING Entity))

(<=>
  (instance ?CLASS Class)
  (subclass ?CLASS Entity))

(subclass Physical Entity)
(partition Physical Object Process)

(documentation Physical EnglishLanguage "An entity that has a location in space-time.
Note that locations are themselves understood to have a location in
space-time.")

(=>
  (instance ?PHYS Physical)
  (exists (?LOC ?TIME)
    (and
      (located ?PHYS ?LOC)
      (time ?PHYS ?TIME))))

(subclass Object Physical)
(documentation Object EnglishLanguage "Corresponds roughly to the class of ordinary
objects.  Examples include normal physical objects, geographical regions,
and locations of &%Processes, the complement of &%Objects in the &%Physical
class.  In a 4D ontology, an &%Object is something whose spatiotemporal
extent is thought of as dividing into spatial parts roughly parallel to the
time-axis.")

(subclass SelfConnectedObject Object)

(documentation SelfConnectedObject EnglishLanguage "A &%SelfConnectedObject is any
&%Object that does not consist of two or more disconnected parts.")

(subclass OrganicThing SelfConnectedObject)

(documentation OrganicThing EnglishLanguage "A &%SelfConnectedObject that is
produced by a non-intentional process from an &%Organism.  Note that this
refers only to the primary cause.  That is, a &%PlantAgriculturalProduct
is firstly produced by a &%Plant, and only secondarily by a &%Human that is
tending the plant.")

(instance FrontFn SpatialRelation)
(instance FrontFn PartialValuedRelation)
(instance FrontFn UnaryFunction)
(domain FrontFn 1 SelfConnectedObject)
(range FrontFn SelfConnectedObject)

(documentation FrontFn EnglishLanguage "A &%Function that maps an &%Object to the side
that generally receives the most attention or that typically faces the
direction in which the &%Object moves.  Note that this is a partial
function, since some &%Objects do not have sides, e.g. apples and
spheres.  Note too that the &%range of this &%Function is indefinite in
much the way that &%ImmediateFutureFn and &%ImmediatePastFn are indefinite.
Although this indefiniteness is undesirable from a theoretical standpoint,
it does not have significant practical implications, since there is
widespread intersubjective agreement about the most common cases.")

(=>
   (instance ?OBJ SelfConnectedObject)
   (side (FrontFn ?OBJ) ?OBJ))

(instance BackFn SpatialRelation)
(instance BackFn PartialValuedRelation)
(instance BackFn UnaryFunction)
(domain BackFn 1 SelfConnectedObject)
(range BackFn SelfConnectedObject)

(documentation BackFn EnglishLanguage "A &%Function that maps an &%Object to the side
that is opposite the &%FrontFn of the &%Object.  Note that this is a
partial function, since some &%Objects do not have sides, e.g. apples
and spheres.  Note too that the &%range of this &%Function is indefinite in
much the way that &%ImmediateFutureFn and &%ImmediatePastFn are indefinite.
Although this indefiniteness is undesirable from a theoretical standpoint,
it does not have significant practical implications, since there is
widespread intersubjective agreement about the most common cases.")

(=>
   (instance ?OBJ SelfConnectedObject)
   (side (BackFn ?OBJ) ?OBJ))

(instance part SpatialRelation)
(instance part PartialOrderingRelation)
(domain part 1 Object)
(domain part 2 Object)

(documentation part EnglishLanguage "The basic mereological relation.  All other
mereological relations are defined in terms of this one.
(&%part ?PART ?WHOLE) simply means that the &%Object ?PART is part
of the &%Object ?WHOLE.  Note that, since &%part is a
&%ReflexiveRelation, every &%Object is a part of itself.")

(instance properPart AsymmetricRelation)
(instance properPart TransitiveRelation)
(subrelation properPart part)

(documentation properPart EnglishLanguage "(&%properPart ?OBJ1 ?OBJ2) means that
?OBJ1 is a part of ?OBJ2 other than ?OBJ2 itself. This is a
&%TransitiveRelation and &%AsymmetricRelation (hence an
&%IrreflexiveRelation).")

(<=>
  (properPart ?OBJ1 ?OBJ2)
  (and
    (part ?OBJ1 ?OBJ2)
    (not
      (part ?OBJ2 ?OBJ1))))

(subrelation piece part)
(instance piece BinaryPredicate)
(domain piece 1 Substance)
(domain piece 2 Substance)

(documentation piece EnglishLanguage "A specialized common sense notion of part for
arbitrary parts of &%Substances.  Quasi-synonyms are: chunk, hunk, bit,
etc.  Compare &%component, another subrelation of &%part.")

(=>
   (piece ?SUBSTANCE1 ?SUBSTANCE2)
   (forall (?CLASS)
      (=>
         (instance ?SUBSTANCE1 ?CLASS)
         (instance ?SUBSTANCE2 ?CLASS))))

(subrelation component part)
(instance component BinaryPredicate)
(domain component 1 CorpuscularObject)
(domain component 2 CorpuscularObject)

(documentation component EnglishLanguage "A specialized common sense notion of part
for heterogeneous parts of complexes. (&%component ?COMPONENT ?WHOLE)
means that ?COMPONENT is a component of ?WHOLE. Examples of component
include the doors and walls of a house, the states or provinces of a
country, or the limbs and organs of an animal.  Compare &%piece, which
is also a subrelation of &%part.")

(instance material BinaryPredicate)
(domainSubclass material 1 Substance)
(domain material 2 CorpuscularObject)

(documentation material EnglishLanguage "(&%material ?SUBSTANCE ?OBJECT) means that
?OBJECT is structurally made up in part of ?SUBSTANCE. This relation
encompasses the concepts of 'composed of', 'made of', and 'formed of'.
For example, plastic is a &%material of my computer monitor.  Compare
&%part and its subrelations, viz &%component and &%piece.")

(=>
  (contains ?SMALL ?BIG)
  (partlyLocated ?SMALL ?BIG))

(instance contains SpatialRelation)
(instance contains AsymmetricRelation)
(instance contains PartialValuedRelation)
(disjointRelation contains part)
(domain contains 1 SelfConnectedObject)
(domain contains 2 Object)

(documentation contains EnglishLanguage "The relation of spatial containment for two
separable objects.  When the two objects are not separable (e.g. an
automobile and one of its seats), the relation of &%part should be used.
(&%contains ?OBJ1 ?OBJ2) means that the &%SelfConnectedObject ?OBJ1 has
a space (i.e. a &%Hole) which is at least partially filled by ?OBJ2.")

(<=>
   (contains ?OBJ1 ?OBJ2)
   (exists (?HOLE)
      (and
         (hole ?HOLE ?OBJ1)
         (properlyFills ?OBJ2 ?HOLE))))

(subclass Substance SelfConnectedObject)
(partition Substance PureSubstance Mixture)
(partition Substance SyntheticSubstance NaturalSubstance)

(documentation Substance EnglishLanguage "An &%Object in which every part is similar to
every other in every relevant respect.  More precisely, something is a
&%Substance when it has only arbitrary pieces as parts - any parts have
properties which are similar to those of the whole.  Note that a &%Substance
may nonetheless have physical properties that vary.  For example, the
temperature, chemical constitution, density, etc. may change from one part
to another.  An example would be a body of water.")

(=>
   (and
      (subclass ?OBJECTTYPE Substance)
      (instance ?OBJECT ?OBJECTTYPE)
      (piece ?PART ?OBJECT))
   (instance ?PART ?OBJECTTYPE))

(=>
   (and
      (instance ?OBJ Substance)
      (attribute ?OBJ ?ATTR)
      (piece ?PART ?OBJ))
   (attribute ?PART ?ATTR))

(subclass SyntheticSubstance Substance)

(documentation SyntheticSubstance EnglishLanguage "Any &%Substance that is the result of
an &%IntentionalProcess, i.e. any substance that is created by &%Humans.")

(<=>
   (instance ?SUBSTANCE SyntheticSubstance)
   (exists (?PROCESS)
      (and
         (instance ?PROCESS IntentionalProcess)
         (result ?PROCESS ?SUBSTANCE)
         (instance ?SUBSTANCE Substance))))

(subclass NaturalSubstance Substance)
(documentation NaturalSubstance EnglishLanguage "Any &%Substance that is not the result of
an &%IntentionalProcess, i.e. any substance that occurs naturally.")

(subclass PureSubstance Substance)
(partition PureSubstance CompoundSubstance ElementalSubstance)

(documentation PureSubstance EnglishLanguage "The &%Class of &%Substances with constant
composition.  A &%PureSubstance can be either an element (&%ElementalSubstance)
or a compound of elements (&%CompoundSubstance).  Examples: Table salt
(sodium chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), water (H_2O),
iron (Fe), copper (Cu), and oxygen (O_2).")

(subclass ElementalSubstance PureSubstance)

(documentation ElementalSubstance EnglishLanguage "The &%Class of &%PureSubstances that
cannot be separated into two or more &%Substances by ordinary chemical
(or physical) means. This excludes nuclear reactions. &%ElementalSubstances
are composed of only one kind of atom. Examples: Iron (Fe), copper (Cu),
and oxygen (O_2).  &%ElementalSubstances are the simplest &%PureSubstances.")

(subclass Metal ElementalSubstance)

(documentation Metal EnglishLanguage "A &%Metal is an &%ElementalSubstance that conducts
heat and electricity, is shiny and reflects many colors of light, and can be hammered
into sheets or drawn into wire.  About 80% of the known chemical elements
(&%ElementalSubstances) are metals.")

(subclass Atom ElementalSubstance)
(documentation Atom EnglishLanguage "An extremely small unit of matter that retains its
identity in Chemical reactions.  It consists of an &%AtomicNucleus and
&%Electrons surrounding the &%AtomicNucleus.")

(=>
   (instance ?ATOM Atom)
   (exists (?PROTON ?ELECTRON)
      (and
         (component ?PROTON ?ATOM)
         (component ?ELECTRON ?ATOM)
         (instance ?PROTON Proton)
         (instance ?ELECTRON Electron))))

(=>
   (instance ?ATOM Atom)
   (forall (?NUCLEUS1 ?NUCLEUS2)
      (=>
         (and
            (component ?NUCLEUS1 ?ATOM)
            (component ?NUCLEUS2 ?ATOM)
            (instance ?NUCLEUS1 AtomicNucleus)
            (instance ?NUCLEUS2 AtomicNucleus))
         (equal ?NUCLEUS1 ?NUCLEUS2))))

(subclass SubatomicParticle ElementalSubstance)

(documentation SubatomicParticle EnglishLanguage "The class of &%ElementalSubstances that
are smaller than &%Atoms and compose &%Atoms.")

(=>
   (instance ?PARTICLE SubatomicParticle)
   (exists (?ATOM)
      (and
         (instance ?ATOM Atom)
         (component ?PARTICLE ?ATOM))))

(subclass AtomicNucleus SubatomicParticle)
(documentation AtomicNucleus EnglishLanguage "The core of the &%Atom.  It is composed of
&%Protons and &%Neutrons.")

(=>
   (instance ?NUCLEUS AtomicNucleus)
   (exists (?NEUTRON ?PROTON)
      (and
         (component ?NEUTRON ?NUCLEUS)
         (component ?PROTON ?NUCLEUS)
         (instance ?NEUTRON Neutron)
         (instance ?PROTON Proton))))

(subclass Electron SubatomicParticle)

(documentation Electron EnglishLanguage "&%SubatomicParticles that surround the
&%AtomicNucleus.  They have a negative charge.")

(subclass Proton SubatomicParticle)

(documentation Proton EnglishLanguage "Components of the &%AtomicNucleus.  They have a
positive charge.")

(subclass Neutron SubatomicParticle)

(documentation Neutron EnglishLanguage "Components of the &%AtomicNucleus.  They have no
charge.")

(subclass CompoundSubstance PureSubstance)
(documentation CompoundSubstance EnglishLanguage "The &%Class of &%Substances that contain
two or more elements (&%ElementalSubstances) in definite proportion by weight.				; Here!  Removed extraneous comma.
The composition of a pure compound will be invariant, regardless of the method
of preparation. Compounds are composed of more than one kind of atom (element).
The term molecule is often used for the smallest unit of a compound that still
retains all of the properties of the compound.  Examples: Table salt (sodium
chloride, NaCl), sugar (sucrose, C_{12}H_{22}O_{11}), and water (H_2O). ")

(subclass Mixture Substance)

(documentation Mixture EnglishLanguage "A &%Mixture is two or more &%PureSubstances,
combined in varying proportions - each retaining its own specific properties.
The components of a &%Mixture can be separated by physical means, i.e. without
the making and breaking of chemical bonds. Examples: Air, table salt thoroughly
dissolved in water, milk, wood, and concrete.")

(=>
   (instance ?MIXTURE Mixture)
   (exists (?PURE1 ?PURE2)
      (and
         (instance ?PURE1 PureSubstance)
         (instance ?PURE2 PureSubstance)
         (not (equal ?PURE1 ?PURE2))
         (piece ?PURE1 ?MIXTURE)
         (piece ?PURE2 ?MIXTURE))))

(=>
   (and
      (instance ?MIXTURE Mixture)
      (piece ?SUBSTANCE ?MIXTURE)
      (not (instance ?SUBSTANCE Mixture)))
   (instance ?SUBSTANCE PureSubstance))

(subclass CorpuscularObject SelfConnectedObject)
(disjoint CorpuscularObject Substance)
(documentation CorpuscularObject EnglishLanguage "A &%SelfConnectedObject whose parts have
properties that are not shared by the whole.")

(=>
   (instance ?OBJ CorpuscularObject)
   (exists (?SUBSTANCE1 ?SUBSTANCE2)
      (and
         (subclass ?SUBSTANCE1 Substance)
         (subclass ?SUBSTANCE2 Substance)
         (material ?SUBSTANCE1 ?OBJ)
         (material ?SUBSTANCE2 ?OBJ)
         (not (equal ?SUBSTANCE1 ?SUBSTANCE2)))))

(subclass Region Object)

(documentation Region EnglishLanguage "A topographic location.  &%Regions encompass
surfaces of &%Objects, imaginary places, and &%GeographicAreas.  Note
that a &%Region is the only kind of &%Object which can be located at
itself.  Note too that &%Region is not a subclass of &%SelfConnectedObject,
because some &%Regions, e.g. archipelagos, have &%parts which are not
&%connected with one another.")

(=>
   (instance ?REGION Region)
   (exists (?PHYS)
      (located ?PHYS ?REGION)))

(subclass Collection Object)
(disjoint Collection SelfConnectedObject)

(documentation Collection EnglishLanguage "Collections have &%members like &%Classes, but,
unlike &%Classes, they have a position in space-time and &%members can be
added and subtracted without thereby changing the identity of the
&%Collection.  Some examples are toolkits, football teams, and flocks
of sheep.")

(=>
  (instance ?COLL Collection)
  (exists (?OBJ)
    (member ?OBJ ?COLL)))

; (subrelation member part)
(instance member AsymmetricRelation)
(instance member IntransitiveRelation)
(domain member 1 Object)
(domain member 2 Collection)
(relatedInternalConcept member instance)
(relatedInternalConcept member element)

(documentation member EnglishLanguage "A specialized common sense notion of part for
uniform parts of &%Collections.  For example, each sheep in a flock of sheep would have
the relationship of member to the flock.")

(instance subCollection BinaryPredicate)
(instance subCollection PartialOrderingRelation)
(domain subCollection 1 Collection)
(domain subCollection 2 Collection)

(documentation subCollection EnglishLanguage "(&%subCollection ?COLL1 ?COLL2) means that
the &%Collection ?COLL1 is a proper part of the &%Collection ?COLL2.")

(subrelation subCollection part)

(<=>
  (subCollection ?COLL1 ?COLL2)
  (forall (?MEMBER)
    (=>
      (member ?MEMBER ?COLL1)
      (member ?MEMBER ?COLL2))))

(subclass ContentBearingPhysical Physical)

(documentation ContentBearingPhysical EnglishLanguage "Any &%Object or &%Process that
expresses content.  This covers &%Objects that contain a &%Proposition,
such as a book, as well as &%ManualSignLanguage, which may similarly
contain a &%Proposition.")

(=>
   (instance ?OBJ ContentBearingPhysical)
   (exists (?THING)
      (represents ?OBJ ?THING)))

(subclass ContentBearingProcess ContentBearingPhysical)

;; NS: add.  Missing!
(subclass ContentBearingProcess Process)

;; NS: cf.  Note that &%ManualHumanLanguage is not a subclass of
;; &%Process, despite the documentation statement below.

(documentation ContentBearingProcess EnglishLanguage "Any &%Process, for example
&%ManualHumanLanguage, which may contain a &%Proposition.")

(subclass ContentBearingObject CorpuscularObject)
(subclass ContentBearingObject ContentBearingPhysical)
(relatedInternalConcept ContentBearingObject containsInformation)

(documentation ContentBearingObject EnglishLanguage "Any &%SelfConnectedObject that
expresses content.  This content may be a &%Proposition, e.g. when the
&%ContentBearingObject is a &%Sentence or &%Text, or it may be a representation of an
abstract or physical object, as with an &%Icon, a &%Word or a &%Phrase.")

(subclass SymbolicString ContentBearingObject)

(documentation SymbolicString EnglishLanguage "The &%Class of alphanumeric sequences.")

(subclass Character SymbolicString)

(documentation Character EnglishLanguage "An element of an alphabet, a set of numerals,
etc.  Note that a &%Character may or may not be part of a &%Language.  &%Character
is a subclass of &%SymbolicString, because every instance of &%Character is
an alphanumeric sequence consisting of a single element.")

(=>
    (instance ?STRING SymbolicString)
    (exists (?PART)
        (and
            (part ?PART ?STRING)
            (instance ?PART Character))))

(instance containsInformation BinaryPredicate)
(instance containsInformation AsymmetricRelation)
(subrelation containsInformation represents)
(domain containsInformation 1 ContentBearingPhysical)
(domain containsInformation 2 Proposition)

(documentation containsInformation EnglishLanguage "A subrelation of &%represents.  This
predicate relates a &%ContentBearingPhysical to the &%Proposition that is
expressed by the &%ContentBearingPhysical. Examples include the relationships
between a physical novel and its story and between a printed score and its
musical content.")

(subclass Icon ContentBearingPhysical)

(documentation Icon EnglishLanguage "This is the subclass of &%ContentBearingPhysical
which are not part of a &%Language and which have some sort of similarity
with the &%Objects that they represent.  This &%Class would include symbolic
roadway signs, representational art works, photographs, etc.")

(subclass Recording ContentBearingObject)
(documentation Recording EnglishLanguage "&%Recording refers to a &%ContentBearingObject
that represents some &%Process that happened in real life")
(termFormat EnglishLanguage Recording "recording")

(subclass MotionPicture Recording)
(subclass MotionPicture Text)
(documentation MotionPicture EnglishLanguage "A &%ContentBearingObject which depicts
motion (and which may have an audio or text component as well).  This &%Class covers
films, videos, etc.")

(subclass LinguisticExpression ContentBearingPhysical)
(disjoint LinguisticExpression Icon)

(documentation LinguisticExpression EnglishLanguage "This is the subclass of
&%ContentBearingPhysical which are language-related.  Note that this &%Class
encompasses both &%Language and the the elements of &%Languages,
e.g. &%Words.")

(subclass Language LinguisticExpression)
(disjointDecomposition Language AnimalLanguage HumanLanguage ComputerLanguage)

(documentation Language EnglishLanguage "A system of signs for expressing thought.  The
system can be either natural or artificial, i.e. something that emerges
gradually as a cultural artifact or something that is intentionally created
by a person or group of people.")

(subclass WrittenLanguage Language)

(subclass AnimalLanguage Language)

(documentation AnimalLanguage EnglishLanguage "The &%subclass of &%Languages used by
&%Animals other than &%Humans.")

(=>
   (and
      (instance ?LANG AnimalLanguage)
      (agent ?PROC ?AGENT)
      (instrument ?PROC ?LANG))
   (and
      (instance ?AGENT Animal)
      (not (instance ?AGENT Human))))

(subclass ArtificialLanguage Language)

(documentation ArtificialLanguage EnglishLanguage "The &%subclass of &%Languages that are
designed by &%Humans.")

(subclass ComputerLanguage ArtificialLanguage)

(documentation ComputerLanguage EnglishLanguage "The class of &%Languages designed for
and interpreted by a computer.")

(=>
   (and
      (instance ?LANG ComputerLanguage)
      (agent ?PROC ?AGENT)
      (instrument ?PROC ?LANG))
   (instance ?AGENT Machine))

(subclass HumanLanguage Language)
(partition HumanLanguage NaturalLanguage ConstructedLanguage)
(partition HumanLanguage SpokenHumanLanguage ManualHumanLanguage)

(documentation HumanLanguage EnglishLanguage "The &%subclass of &%Languages used by
&%Humans.")

(=>
   (and
      (instance ?LANG HumanLanguage)
      (agent ?PROC ?AGENT)
      (instrument ?PROC ?LANG))
   (instance ?AGENT Human))

(subclass ConstructedLanguage HumanLanguage)
(subclass ConstructedLanguage ArtificialLanguage)
(documentation ConstructedLanguage EnglishLanguage "An &%ConstructedLanguage is a
&%HumanLanguage that did not evolve spontaneously within a language
community, but rather had its core grammar and vocabulary invented by
one or more language experts, often with an aim to produce a more
grammatically regular language than any language that has evolved
naturally.  This &%Class includes languages like Esperanto that were
created to facilitate international communication.")                                      ; Here! Add final period to last sentence.

(=>
   (instance ?LANG ConstructedLanguage)
   (exists (?PLAN)
      (and
         (instance ?PLAN Planning)
         (result ?PLAN ?LANG))))

(subclass NaturalLanguage HumanLanguage)

(documentation NaturalLanguage EnglishLanguage "The &%subclass of &%HumanLanguages which
are not designed and which evolve from generation to generation.  This
&%Class includes all of the national languages, e.g. English, Spanish,
Japanese, etc.  Note that this class includes dialects of natural
languages.")

(subclass ManualHumanLanguage HumanLanguage)

(documentation ManualHumanLanguage EnglishLanguage "A &%ManualHumanLanguage is a
&%HumanLanguage which has as its medium gestures and movement, such
as the shape, position, and movement of the hands.")

(subclass SpokenHumanLanguage HumanLanguage)

(documentation SpokenHumanLanguage EnglishLanguage "A &%SpokenHumanLanguage is a
&%HumanLanguage which has as its medium the human voice. It can also
be represented visually through writing, although not all
&%SpokenHumanLanguages have a codified written form.")

(instance language BinaryPredicate)
(domain language 1 ContentBearingPhysical)
(domain language 2 Language)

(documentation language EnglishLanguage "A relation between a &%ContentBearingPhysical
and a &%Language in that &%Entity.  Note that this could be a sign language
process as well as a document.  Note also that a given &%Text might have more than
one &%Language, so this is a &%Relation and not a &%Function.")

(subclass WrittenHumanLanguage HumanLanguage)
(documentation WrittenHumanLanguage EnglishLanguage "The form of a &%HumanLanguage
used in &%Writing.  Not all &%HumanLanguages have a written form.  There may be
forms of a language in written form that are radically different for the same
spoken form, i.e. Pinyin and written Chinese.")

(=>
  (instance ?W Writing)
  (exists (?S ?L)
    (and
      (instance ?S Text)
      (instance ?L WrittenHumanLanguage)
      (language ?S ?L))))
      
(instance ChineseTraditionalLanguage WrittenLanguage)
(documentation ChineseTraditionalLanguage EnglishLanguage "The formal Chinese
script used in government and scholarly writings in China prior to the 1950's
and still used in &%HongKong and &%Taiwan.")

(instance ChineseSimplifiedWriting WrittenLanguage)
(documentation ChineseSimplifiedWriting EnglishLanguage "A simplification of
the Chinese character system largely standardized in 1964 and used in the 
People's Republic of China.")

(instance EnglishLanguage NaturalLanguage)
(instance EnglishLanguage SpokenHumanLanguage)

(documentation EnglishLanguage EnglishLanguage "A Germanic language that incorporates many
roots from the Romance languages.  It is the official language of the &%UnitedStates,
the &%UnitedKingdom, and many other countries.")

(subclass Word LinguisticExpression)

(documentation Word EnglishLanguage "A term of a &%Language that represents a concept.")

(subclass Formula Sentence)

(documentation Formula EnglishLanguage "A syntactically well-formed formula in the
SUO-KIF knowledge representation language.")

;; The following ground facts incorporate the 'Agent' hierarchy from the
;; corresponding ontology on the Ontolingua server.  It also includes
;; predicates defined in the ITBM-CNR ontology "Actors".

(subclass Agent Object)

(documentation Agent EnglishLanguage "Something or someone that can act on its own and
produce changes in the world.")

(=>
  (instance ?AGENT Agent)
  (exists (?PROC)
    (capability ?PROC agent ?AGENT)))

(subclass SentientAgent Agent)

;; NS: delete.
;; (documentation SentientAgent EnglishLanguage "An &%Agent that has rights but may or may
;; not have responsibilities and the ability to reason.  If the latter are
;; present, then the &%Agent is also an instance of &%CognitiveAgent.
;; Domesticated animals are an example of &%SentientAgents that are not
;; also &%CognitiveAgents.")                                               ;  here !!!!!!!

;; NS: add.

(documentation SentientAgent EnglishLanguage "A &%SentientAgent is an
&%Agent that is capable of &%Perception and experiences some level of
consciousness (see &%ConsciousnessAttribute).  If the &%Agent is able
to reason at a comparatively high level (evinced by the ability to
learn, plan, and feel emotions), then it is also an instance of
&%CognitiveAgent.  A &%DomesticAnimal is a &%SentientAgent, but may or
may not be a &%CognitiveAgent, depending on the type of &%Animal.")

(subclass CognitiveAgent SentientAgent)

;; NS: delete.
;; (documentation CognitiveAgent EnglishLanguage "A &%SentientAgent with
;; responsibilities and the ability to deliberate, make plans,        ; Here!!!!! Extraneous comma deleted.
;; etc.  This is essentially the legal/ethical notion of a person.  Note
;; that, although &%Human is a subclass of &%CognitiveAgent, there may be
;; instances of &%CognitiveAgent which are not also instances of &%Human.
;; For example, chimpanzees, gorillas, dolphins, whales, and some
;; extraterrestrials
;; (if they exist) may be &%CognitiveAgents.")                        ;  here !!!!!!!

;; NS: add.

(documentation CognitiveAgent EnglishLanguage "A &%CognitiveAgent is
an &%Agent that has the ability to reason, deliberate, make plans, and
experience emotions.  Although &%Human is a subclass of
&%CognitiveAgent, there may be instances of &%CognitiveAgent which are
not also instances of &%Human.  For example, &%Primates, dolphins,
whales, and some extraterrestrials (if they exist) might be considered
&%CognitiveAgents.")

;; NS: new.  Since an Entity might or might not be considered a
;; LegalAgent for its entire existence, depending on the
;; circumstances, it might be better to represent &%LegalAgent as a
;; &%RelationalAttribute.

(subclass LegalAgent Agent)

;; NS: add.
(documentation LegalAgent EnglishLanguage "A &%LegalAgent is an
&%Agent that is allowed by law to to act and be treated as a legal
person for certain purposes, such as being a party to a lawsuit,
owning property, and entering into a contract.  Typically, a
&%LegalAgent is either an adult &%Human or some type of
&%Organization.  Depending on the prevailing legal system in a given
time and location, &%Humans in general, as well as other
&%CognitiveAgents, typically will have additional legal rights and
obligations beyond those accorded to &%LegalAgents.  See the Wikipedia
description of <a
href=http://en.wikipedia.org/wiki/Juristic_person>Juristic
person</a>.")

;; NS: add.
(<=>
  (holdsDuring ?TIME
    (instance ?AGENT LegalAgent))
  (holdsDuring ?TIME
    (or
      (capability LegalAction agent ?AGENT)
      (capability LegalAction patient ?AGENT))))

(instance leader BinaryPredicate)
(instance leader AsymmetricRelation)
(instance leader SingleValuedRelation)
(domain leader 1 Agent)
(domain leader 2 Human)

(documentation leader EnglishLanguage "(&%leader ?INSTITUTION ?PERSON)
means that the leader of ?INSTITUTION is ?PERSON.")

(=>
  (holdsDuring ?TIME (leader ?X ?Y))
  (holdsDuring ?TIME (attribute ?Y Living)))

(subclass Process Physical)
(documentation Process EnglishLanguage "The class of things that happen
and have temporal parts or stages.  Examples include extended events
like a football match or a race, actions like &%Pursuing and &%Reading,
and biological processes. The formal definition is: anything that occurs in
time but is not an &%Object.  Note that a &%Process may have
participants 'inside' it which are &%Objects, such as the players
in a football match.  In a 4D ontology, a &%Process is something whose
spatiotemporal extent is thought of as dividing into temporal stages
roughly perpendicular to the time-axis.")

(subclass DualObjectProcess Process)

(documentation DualObjectProcess EnglishLanguage "Any &%Process that requires two,
nonidentical &%patients.")

(=>
   (instance ?PROCESS DualObjectProcess)
   (exists (?OBJ1 ?OBJ2)
      (and
         (patient ?PROCESS ?OBJ1)
         (patient ?PROCESS ?OBJ2)
         (not (equal ?OBJ1 ?OBJ2)))))

(subclass SingleAgentProcess Process)
(documentation SingleAgentProcess EnglishLanguage "&%SingleAgentProcess
is the &%Class of all &%Processes that require exactly one &%agent in order to occur.")

(=>
  (instance ?PROC SingleAgentProcess)
  (exists (?AGENT)
    (agent ?PROC ?AGENT)))

(=>
    (and
      (instance ?PROC SingleAgentProcess)
      (agent ?PROC ?AGENT_1)
      (agent ?PROC ?AGENT_2))
    (and
      (equal ?AGENT_1 ?AGENT_2)
      (not
        (exists (?AGENT_3)
          (and
            (agent ?PROC ?AGENT_3)
            (not
              (equal ?AGENT_3 ?AGENT_1)))))))

(subclass Abstract Entity)
(disjointDecomposition Abstract Quantity Attribute SetOrClass Relation Proposition)

(documentation Abstract EnglishLanguage "Properties or qualities as distinguished from any
particular embodiment of the properties/qualities in a physical medium.
Instances of Abstract can be said to exist in the same sense as mathematical
objects such as sets and relations, but they cannot exist at a particular
place and time without some physical encoding or embodiment.")

;; Something is Abstract just in case it has neither a spatial nor temporal
;; location.  the disjointness declaration above handles the axioms below,
;; which otherwise cause a type violation

; (=>
;   (instance ?ABS Abstract)
;   (not
;      (exists (?POINT)
;        (located ?ABS ?POINT))))

;(=>
;   (instance ?ABS Abstract)
;   (not
;      (exists (?POINT)
;        (time ?ABS ?POINT))))

(subclass Quantity Abstract)

(documentation Quantity EnglishLanguage "Any specification of how many or how much of
something there is.  Accordingly, there are two subclasses of &%Quantity:
&%Number (how many) and &%PhysicalQuantity (how much).")

(subclass Attribute Abstract)
;(partition Attribute InternalAttribute RelationalAttribute PerceptualAttribute)
(partition Attribute InternalAttribute RelationalAttribute)

(documentation Attribute EnglishLanguage "Qualities which we cannot or choose not to
reify into subclasses of.")

(instance property BinaryPredicate)
(domain property 1 Entity)
(domain property 2 Attribute)

(documentation property EnglishLanguage "This &%Predicate holds between an instance of
&%Entity and an instance of &%Attribute.  (&%property ?ENTITY ?ATTR)
means that ?ENTITY has the &%Attribute ?ATTR.")

(instance attribute AsymmetricRelation)
(instance attribute IrreflexiveRelation)
(instance attribute TotalValuedRelation)
(instance attribute BinaryPredicate)
(subrelation attribute property)
(domain attribute 1 Object)
(domain attribute 2 Attribute)

(documentation attribute EnglishLanguage "(&%attribute ?OBJECT ?PROPERTY) means that
?PROPERTY is a &%Attribute of ?OBJECT.  For example,
(&%attribute &%MyLittleRedWagon &%Red).")

(instance manner AsymmetricRelation)
(instance manner IrreflexiveRelation)
(instance manner TotalValuedRelation)
(instance manner BinaryPredicate)
(subrelation manner property)
(domain manner 1 Process)
(domain manner 2 Attribute)
(disjointRelation manner attribute)

(documentation manner EnglishLanguage "(&%manner ?PROCESS ?MANNER) means that the
&%Process ?PROCESS is qualified by the &%Attribute ?MANNER.  The &%Attributes
of &%Processes are usually denoted by adverbs and include things like the
speed of the wind, the style of a dance, or the intensity of a sports
competition.")

; Seldom used function that appears to cause a very complex contradiction

; (instance AbstractionFn UnaryFunction)
; (instance AbstractionFn PartialValuedRelation)
; (domain AbstractionFn 1 Class)
; (range AbstractionFn Attribute)
; (documentation AbstractionFn EnglishLanguage "A &%UnaryFunction that maps a &%Class into
; the instance of &%Attribute that specifies the condition(s) for membership
; in the &%Class.")                                                            ;  here !!!!!!!

; (<=>
;   (equal (AbstractionFn ?CLASS) ?ATTR)
;    (forall (?INST)
;       (<=>
;          (instance ?INST ?CLASS)
;          (property ?INST ?ATTR))))

(instance ExtensionFn UnaryFunction)
(instance ExtensionFn PartialValuedRelation)
(domain ExtensionFn 1 Attribute)
(range ExtensionFn Class)

(documentation ExtensionFn EnglishLanguage "A &%UnaryFunction that maps an &%Attribute
into the &%Class whose condition for membership is the &%Attribute.")

; (<=>
;    (equal (ExtensionFn ?ATTRIBUTE) ?CLASS)
;    (equal (AbstractionFn ?CLASS) ?ATTRIBUTE))

(documentation AttrFn EnglishLanguage "For given class and for given attribute, return
a subclass of the class of object having the attribute")

(instance AttrFn BinaryFunction)
(instance AttrFn PartialValuedRelation)
(range AttrFn Class)
(domain AttrFn 1 SetOrClass)
(domain AttrFn 2 Attribute)

(=>
    (equal ?X
        (AttrFn ?CLASS ?ATTR))
    (forall (?I)
        (=>
            (instance ?I ?X)
        (and
            (instance ?I ?CLASS)
            (subclass ?X ?CLASS)
            (property ?I ?ATTR)))))

(=>
    (and
        (subclass ?X ?CLASS)
        (instance ?I ?X)
        (instance ?ATTR Attribute))
    (=>
        (property ?I ?ATTR)
        (equal ?X
            (AttrFn ?CLASS ?ATTR))))

(<=>
    (instance ?X
        (AttrFn ?CLASS ?ATTR))
    (and
        (instance ?X ?CLASS)
        (property ?X ?ATTR)))

(subclass InternalAttribute Attribute)

(documentation InternalAttribute EnglishLanguage "Any &%Attribute of an &%Entity that is
an internal property of the &%Entity, e.g. its shape, its color, its fragility,
etc.")

(subclass PhysicalAttribute InternalAttribute)

(documentation PhysicalAttribute EnglishLanguage "An &%InternalAttribute given by physical
properties of the object.")

(subclass RelationalAttribute Attribute)

(documentation RelationalAttribute EnglishLanguage "Any &%Attribute that an &%Entity has
by virtue of a relationship that it bears to another &%Entity or set of &%Entities,
e.g. &%SocialRoles and &%PositionalAttributes.")

;; The following formulas incorporate the Number hierarchy from the
;; ontology 'kif-numbers' on the Ontolingua server.

(subclass Number Quantity)
(partition Number RealNumber ImaginaryNumber ComplexNumber)

(documentation Number EnglishLanguage "A measure of how many things there are, or how
much there is, of a certain kind.  &%Numbers are subclassed into
&%RealNumber, &%ComplexNumber, and &%ImaginaryNumber.")

(instance lessThan BinaryPredicate)
(instance lessThan TransitiveRelation)
(instance lessThan IrreflexiveRelation)
(instance lessThan RelationExtendedToQuantities)
(trichotomizingOn lessThan RealNumber)
(domain lessThan 1 Quantity)
(domain lessThan 2 Quantity)

(documentation lessThan EnglishLanguage "(&%lessThan ?NUMBER1 ?NUMBER2) is true just
in case the &%Quantity ?NUMBER1 is less than the &%Quantity ?NUMBER2.")

(instance greaterThan BinaryPredicate)
(instance greaterThan TotalValuedRelation)
(instance greaterThan TransitiveRelation)
(instance greaterThan IrreflexiveRelation)
(instance greaterThan RelationExtendedToQuantities)
(trichotomizingOn greaterThan RealNumber)
(domain greaterThan 1 Quantity)
(domain greaterThan 2 Quantity)
(inverse greaterThan lessThan)

(documentation greaterThan EnglishLanguage "(&%greaterThan ?NUMBER1 ?NUMBER2) is true
just in case the &%Quantity ?NUMBER1 is greater than the &%Quantity
?NUMBER2.")

(instance lessThanOrEqualTo BinaryPredicate)
(instance lessThanOrEqualTo PartialOrderingRelation)
(instance lessThanOrEqualTo RelationExtendedToQuantities)
(trichotomizingOn lessThanOrEqualTo RealNumber)
(domain lessThanOrEqualTo 1 Quantity)
(domain lessThanOrEqualTo 2 Quantity)

(documentation lessThanOrEqualTo EnglishLanguage "(&%lessThanOrEqualTo ?NUMBER1 ?NUMBER2)
is true just in case the &%Quantity ?NUMBER1 is less than or equal to
the &%Quantity ?NUMBER2.")

(<=>
  (lessThanOrEqualTo ?NUMBER1 ?NUMBER2)
  (or
    (equal ?NUMBER1 ?NUMBER2)
    (lessThan ?NUMBER1 ?NUMBER2)))

(instance greaterThanOrEqualTo BinaryPredicate)
(instance greaterThanOrEqualTo PartialOrderingRelation)
(instance greaterThanOrEqualTo RelationExtendedToQuantities)
(trichotomizingOn greaterThanOrEqualTo RealNumber)
(domain greaterThanOrEqualTo 1 Quantity)
(domain greaterThanOrEqualTo 2 Quantity)
(inverse greaterThanOrEqualTo lessThanOrEqualTo)

(documentation greaterThanOrEqualTo EnglishLanguage "(&%greaterThanOrEqualTo ?NUMBER1
?NUMBER2) is true just in case the &%Quantity ?NUMBER1 is greater than or equal to the
&%Quantity ?NUMBER2.")

(<=>
  (greaterThanOrEqualTo ?NUMBER1 ?NUMBER2)
  (or
    (equal ?NUMBER1 ?NUMBER2)
    (greaterThan ?NUMBER1 ?NUMBER2)))

(subclass RealNumber Number)
(partition RealNumber NegativeRealNumber NonnegativeRealNumber)
(partition RealNumber RationalNumber IrrationalNumber)

(documentation RealNumber EnglishLanguage "Any &%Number that can be expressed as a
(possibly infinite) decimal, i.e. any &%Number that has a position
on the number line.")

(subclass ImaginaryNumber Number)

(documentation ImaginaryNumber EnglishLanguage "Any &%Number that is the result of
multiplying a &%RealNumber by the square root of -1.")

;(=>
;   (instance ?NUMBER ImaginaryNumber)
;   (exists (?REAL)
;      (and
;         (instance ?REAL RealNumber)
;         (equal ?NUMBER (MultiplicationFn ?REAL (SquareRootFn -1))))))

(subclass RationalNumber RealNumber)

(documentation RationalNumber EnglishLanguage "Any &%RealNumber that is the product of
dividing two &%Integers.")

(subclass IrrationalNumber RealNumber)

(documentation IrrationalNumber EnglishLanguage "Any &%RealNumber that is not also a
&%RationalNumber.")

(subclass NonnegativeRealNumber RealNumber)

(documentation NonnegativeRealNumber EnglishLanguage "A &%RealNumber that is greater than
or equal to zero.")

(<=>
   (instance ?NUMBER NonnegativeRealNumber)
   (and
      (greaterThanOrEqualTo ?NUMBER 0)
      (instance ?NUMBER RealNumber)))

(subclass PositiveRealNumber NonnegativeRealNumber)

(documentation PositiveRealNumber EnglishLanguage "A &%RealNumber that is greater than
zero.")

(<=>
   (instance ?NUMBER PositiveRealNumber)
   (and
      (greaterThan ?NUMBER 0)
      (instance ?NUMBER RealNumber)))

(subclass NegativeRealNumber RealNumber)

(documentation NegativeRealNumber EnglishLanguage "A &%RealNumber that is less than
zero.")

(<=>
   (instance ?NUMBER NegativeRealNumber)
   (and
      (lessThan ?NUMBER 0)
      (instance ?NUMBER RealNumber)))

(subclass Integer RationalNumber)
(partition Integer OddInteger EvenInteger)
(partition Integer NegativeInteger NonnegativeInteger)

(documentation Integer EnglishLanguage "A negative or nonnegative whole number.")

(subclass EvenInteger Integer)

(documentation EvenInteger EnglishLanguage "An &%Integer that is evenly divisible
by 2.")

(subclass OddInteger Integer)

(documentation OddInteger EnglishLanguage "An &%Integer that is not evenly divisible
by 2.")

(subclass PrimeNumber Integer)

(documentation PrimeNumber EnglishLanguage "An &%Integer that is evenly divisible only
by itself and 1.")

(subclass NonnegativeInteger Integer)
(subclass NonnegativeInteger NonnegativeRealNumber)

(documentation NonnegativeInteger EnglishLanguage "An &%Integer that is greater than
or equal to zero.")

(=>
  (instance ?X NonnegativeInteger)
  (greaterThan ?X -1))

(subclass NegativeInteger Integer)
(subclass NegativeInteger NegativeRealNumber)

(documentation NegativeInteger EnglishLanguage "An &%Integer that is less than zero.")

(=>
  (instance ?X NegativeInteger)
  (greaterThan 0 ?X))

(subclass PositiveInteger NonnegativeInteger)
(subclass PositiveInteger PositiveRealNumber)

(documentation PositiveInteger EnglishLanguage "An &%Integer that is greater than zero.")

(=>
  (instance ?X PositiveInteger)
  (greaterThan ?X 0))

(subclass BinaryNumber RealNumber)

(documentation BinaryNumber EnglishLanguage "Elements from the number system with base 2.
Every &%BinaryNumber is expressed as a sequence of the digits 1 and 0.")

(subclass ComplexNumber Number)
(disjoint ComplexNumber RealNumber)

(documentation ComplexNumber EnglishLanguage "A &%Number that has the form: x + yi, where
x and y are &%RealNumbers and i is the square root of -1.")

;(=>
;   (instance ?NUMBER ComplexNumber)
;   (exists (?REAL1 ?REAL2)
;      (and
;         (instance ?REAL1 RealNumber)
;         (instance ?REAL2 RealNumber)
;         (equal ?NUMBER
;           (AdditionFn ?REAL1
;             (MultiplicationFn ?REAL2
;               (SquareRootFn -1)))))))

(subclass PhysicalQuantity Quantity)
(partition PhysicalQuantity ConstantQuantity FunctionQuantity)

(documentation PhysicalQuantity EnglishLanguage "A &%PhysicalQuantity is a measure of
some quantifiable aspect of the modeled world, such as 'the earth's
diameter' (a constant length) and 'the stress in a loaded deformable
solid' (a measure of stress, which is a function of three spatial
coordinates).  Every &%PhysicalQuantity is either a &%ConstantQuantity
or &%FunctionQuantity.  Instances of &%ConstantQuantity are dependent
on a &%UnitOfMeasure, while instances of &%FunctionQuantity are
&%Functions that map instances of &%ConstantQuantity to other instances
of &%ConstantQuantity (e.g., a &%TimeDependentQuantity is a
&%FunctionQuantity).  Although the name and definition of
&%PhysicalQuantity is borrowed from physics, a &%PhysicalQuantity need
not be material.  Aside from the dimensions of length, time, velocity,
etc., nonphysical dimensions such as currency are also possible.
Accordingly, amounts of money would be instances of &%PhysicalQuantity.
A &%PhysicalQuantity is  distinguished from a pure &%Number by the fact that
the former is associated with a dimension of measurement.")

(subclass ConstantQuantity PhysicalQuantity)

(documentation ConstantQuantity EnglishLanguage "A &%ConstantQuantity
is a &%PhysicalQuantity that has a constant value, e.g. 3 &%Meters and
5 &%HourDurations.  The magnitude (see &%MagnitudeFn) of every
&%ConstantQuantity is a &%RealNumber.  &%ConstantQuantity is
distinguished from &%FunctionQuantity, in that each instance of the
latter is formed through the mapping of one &%PhysicalQuantity to
another &%PhysicalQuantity.  Each instance of &%ConstantQuantity is
expressed with the &%BinaryFunction &%MeasureFn, which takes a
&%Number and a &%UnitOfMeasure as arguments.  For example, 3 &%Meters
is expressed as (&%MeasureFn 3 &%Meter).  Instances of
&%ConstantQuantity form a partial order (see
&%PartialOrderingRelation) with the &%lessThan relation, since
&%lessThan is a &%RelationExtendedToQuantities and &%lessThan is
defined over the &%RealNumbers.  The &%lessThan relation is not a
total order (see &%TotalOrderingRelation) over the class
&%ConstantQuantity since elements of some subclasses of
&%ConstantQuantity (such as length quantities) are incomparable to
elements of other subclasses of &%ConstantQuantity
(such as mass quantities).")

(subclass TimeMeasure ConstantQuantity)

(documentation TimeMeasure EnglishLanguage "The class of temporal durations (instances
of &%TimeDuration) and positions of &%TimePoints and &%TimeIntervals along
the universal timeline (instances of &%TimePosition).")

(subclass TimeDuration TimeMeasure)

(documentation TimeDuration EnglishLanguage "Any measure of length of time,
with or without respect to the universal timeline.")

(subclass TimePosition TimeMeasure)
(partition TimePosition TimeInterval TimePoint)

(documentation TimePosition EnglishLanguage "Any &%TimePoint or &%TimeInterval
along the universal timeline from &%NegativeInfinity to &%PositiveInfinity.")

(subclass TimeInterval TimePosition)

(documentation TimeInterval EnglishLanguage "An interval of time.
Note that a &%TimeInterval has both an extent and a location on the
universal timeline.  Note too that a &%TimeInterval has no gaps,
i.e. this class contains only convex time intervals.")

(subclass TimePoint TimePosition)

(documentation TimePoint EnglishLanguage "An extensionless point on
the universal timeline.  The &%TimePoints at which &%Processes occur
can be known with various degrees of precision and approximation, but
conceptually &%TimePoints are point-like and not interval-like.  That
is, it doesn't make sense to talk about how long a &%TimePoint
lasts.")

(subclass FunctionQuantity PhysicalQuantity)

(documentation FunctionQuantity EnglishLanguage "A &%FunctionQuantity
is a &%PhysicalQuantity that is returned by a &%Function that maps
from one or more instances of &%ConstantQuantity to another instance
of &%ConstantQuantity.  For example, the velocity of a particle would
be represented by a &%FunctionQuantity relating values of time (which
are instances of &%ConstantQuantity) to values of distance
(also instances of &%ConstantQuantity).  Note that all elements of the
range of the &%Function corresponding to a &%FunctionQuantity have the
same physical dimension as the &%FunctionQuantity itself.")

(subclass UnaryConstantFunctionQuantity FunctionQuantity)

(documentation UnaryConstantFunctionQuantity EnglishLanguage "A
&%subclass of &%FunctionQuantity, instances of which are returned by
&%UnaryFunctions that map from one instance of the &%Class
&%ConstantQuantity to another instance of the &%Class
&%ConstantQuantity.")

(subclass TimeDependentQuantity UnaryConstantFunctionQuantity)
(documentation TimeDependentQuantity EnglishLanguage "A
&%UnaryConstantFunctionQuantity of continuous time.  All instances of
this &%Class are returned by &%Functions that map a time quantity into
another &%ConstantQuantity such as temperature.  For example, 'the
temperature at the top of the Empire State Building' is a
&%TimeDependentQuantity, since its value depends on the time.")

(subclass SetOrClass Abstract)
(partition SetOrClass Set Class)

(documentation SetOrClass EnglishLanguage "The &%SetOrClass of &%Sets
and &%Classes, i.e. any instance of &%Abstract that has &%elements or
&%instances.")

;; comment it out to avoid (instance SetOrClass SetOrClass)
;(subclass Class SetOrClass)

(documentation Class EnglishLanguage "&%Classes differ from &%Sets in three important
respects. First, &%Classes are not assumed to be extensional.  That is, distinct
&%Classes might well have exactly the same instances.  Second, &%Classes typically
have an associated `condition' that determines the instances of the &%Class.  So,
for example, the condition `human' determines the &%Class of &%Humans.  Note that
some &%Classes might satisfy their own condition (e.g., the &%Class of &%Abstract
things is &%Abstract) and hence be instances of themselves.  Third, the instances
of a class may occur only once within the class, i.e. a class cannot contain
duplicate instances.")

(subclass Set SetOrClass)

(documentation Set EnglishLanguage "A &%SetOrClass that satisfies extensionality as well
as other constraints specified by some choice of set theory.  &%Sets differ
from &%Classes in two important respects.  First, &%Sets are extensional -
two &%Sets with the same &%elements are identical.  Second, a &%Set can be
an arbitrary stock of objects.  That is, there is no requirement that &%Sets
have an associated condition that determines their membership.  Note that &%Sets
are not assumed to be unique sets, i.e. &%elements of a &%Set may occur more
than once in the &%Set.")

(subclass Relation Abstract)
(disjointDecomposition Relation BinaryRelation TernaryRelation QuaternaryRelation
QuintaryRelation VariableArityRelation) (partition Relation Predicate Function List)
(partition Relation TotalValuedRelation PartialValuedRelation)

(documentation Relation EnglishLanguage "The &%Class of relations.  There are three kinds
of &%Relation:  &%Predicate, &%Function, and &%List.  &%Predicates and
&%Functions both denote sets of ordered n-tuples.  The difference between
these two &%Classes is that &%Predicates cover formula-forming operators, while
&%Functions cover term-forming operators.  A &%List, on the other hand, is a
particular ordered n-tuple.")

;; The following part of the ontology covers the various classes under
;; 'Relation'.  Most of the content here is taken from frame-ontology,
;; abstract-algebra, kif-relations, and kif-extensions (ontologies
;; available on the Ontolingua server).

(subclass SingleValuedRelation Relation)
(subclass SingleValuedRelation InheritableRelation)

(documentation SingleValuedRelation EnglishLanguage "A &%Relation is a
&%SingleValuedRelation just in case an assignment of values to every argument position
except the last one determines at most one assignment for the last argument position.
Note that not all &%SingleValuedRelations are &%TotalValuedRelations.")

;; TODO: this appears to be a syntax error when call replacePredVar in sigma's code
;(=>
;   (instance ?REL SingleValuedRelation)
;   (forall (@ROW ?ITEM1 ?ITEM2)
;      (=>
;         (and
;            (?REL @ROW ?ITEM1)
;            (?REL @ROW ?ITEM2))
;         (equal ?ITEM1 ?ITEM2))))

(subclass TotalValuedRelation Relation)
(subclass TotalValuedRelation InheritableRelation)

(documentation TotalValuedRelation EnglishLanguage "A &%Relation is a
&%TotalValuedRelation just in case there exists an assignment for the last argument
position of the &%Relation given any assignment of values to every argument position
except the last one.  Note that declaring a &%Relation to be both a &%TotalValuedRelation
and a &%SingleValuedRelation means that it is a total function.")

(<=>
   (and
     (instance ?REL TotalValuedRelation)
     (instance ?REL Predicate))
   (exists (?VALENCE)
      (and
         (instance ?REL Relation)
         (valence ?REL ?VALENCE)
         (=>
            (forall (?NUMBER ?ELEMENT ?CLASS)
               (=>
                  (and
                     (lessThan ?NUMBER ?VALENCE)
                     (domain ?REL ?NUMBER ?CLASS)
                     (equal ?ELEMENT (ListOrderFn (ListFn @ROW) ?NUMBER)))
                  (instance ?ELEMENT ?CLASS)))
            (exists (?ITEM)
               (?REL @ROW ?ITEM))))))

(subclass PartialValuedRelation Relation)

(documentation PartialValuedRelation EnglishLanguage "A &%Relation is a &%PartialValuedRelation
just in case it is not a &%TotalValuedRelation, i.e. just in case assigning values
to every argument position except the last one does not necessarily mean that there
is a value assignment for the last argument position.  Note that, if a &%Relation
is both a &%PartialValuedRelation and a &%SingleValuedRelation, then it is a partial
function.")

(subclass BinaryRelation Relation)
(subclass BinaryRelation InheritableRelation)

(documentation BinaryRelation EnglishLanguage "&%BinaryRelations are relations that are
true only of pairs of things.  &%BinaryRelations are represented as slots
in frame systems.")

(subclass ReflexiveRelation BinaryRelation)

(documentation ReflexiveRelation EnglishLanguage "&%Relation ?REL is reflexive iff
(?REL ?INST ?INST) for all ?INST.")

;; appear to be a contradiction when ?REL = subclass
;;(<=>
;;   (instance ?REL ReflexiveRelation)
;;   (?REL ?INST ?INST))

(subclass IrreflexiveRelation BinaryRelation)

(documentation IrreflexiveRelation EnglishLanguage "&%Relation ?REL is irreflexive
iff (?REL ?INST ?INST) holds for no value of ?INST.")

(=>
   (instance ?REL IrreflexiveRelation)
   (forall (?INST)
      (not
         (?REL ?INST ?INST))))

(subclass SymmetricRelation BinaryRelation)
(disjoint SymmetricRelation AntisymmetricRelation)

(documentation SymmetricRelation EnglishLanguage "A &%BinaryRelation ?REL is
symmetric just iff (?REL ?INST1 ?INST2) imples (?REL ?INST2 ?INST1), for all ?INST1 and
?INST2.")

(=>
   (instance ?REL SymmetricRelation)
   (forall (?INST1 ?INST2)
      (=>
         (?REL ?INST1 ?INST2)
         (?REL ?INST2 ?INST1))))

(subclass AsymmetricRelation IrreflexiveRelation)
(subclass AsymmetricRelation AntisymmetricRelation)

(documentation AsymmetricRelation EnglishLanguage "A &%BinaryRelation is asymmetric if and
only if it is both an &%AntisymmetricRelation and an &%IrreflexiveRelation.")

(<=>
   (instance ?REL AsymmetricRelation)
   (and
       (instance ?REL AntisymmetricRelation)
       (instance ?REL IrreflexiveRelation)))

(subclass AntisymmetricRelation BinaryRelation)

(documentation AntisymmetricRelation EnglishLanguage "&%BinaryRelation ?REL is an
&%AntisymmetricRelation if for distinct ?INST1 and ?INST2, (?REL ?INST1
?INST2) implies not (?REL ?INST2 ?INST1).  In other words, for all ?INST1
and ?INST2, (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST1) imply that ?INST1
and ?INST2 are identical.  Note that it is possible for an
&%AntisymmetricRelation to be a &%ReflexiveRelation.")

(=>
   (instance ?REL AntisymmetricRelation)
   (forall (?INST1 ?INST2)
      (=>
         (and
            (?REL ?INST1 ?INST2)
            (?REL ?INST2 ?INST1))
         (equal ?INST1 ?INST2))))

(subclass TrichotomizingRelation BinaryRelation)

(documentation TrichotomizingRelation EnglishLanguage "A &%BinaryRelation ?REL is a
&%TrichotomizingRelation just in case all ordered pairs consisting of
distinct individuals are elements of ?REL.")

(=>
   (instance ?REL TrichotomizingRelation)
   (forall (?INST1 ?INST2)
      (or
         (and
            (?REL ?INST1 ?INST2)
            (not (equal ?INST1 ?INST2))
            (not (?REL ?INST2 ?INST1)))
         (and
            (not (?REL ?INST1 ?INST2))
            (equal ?INST1 ?INST2)
            (not (?REL ?INST2 ?INST1)))
         (and
            (not (?REL ?INST1 ?INST2))
            (not (equal ?INST1 ?INST2))
            (?REL ?INST2 ?INST1)))))

(subclass TransitiveRelation BinaryRelation)
(disjoint TransitiveRelation IntransitiveRelation)

(documentation TransitiveRelation EnglishLanguage "A &%BinaryRelation ?REL is transitive
if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply (?REL ?INST1 ?INST3),
for all ?INST1, ?INST2, and ?INST3.")

(=>
   (instance ?REL TransitiveRelation)
   (forall (?INST1 ?INST2 ?INST3)
      (=>
         (and
            (?REL ?INST1 ?INST2)
            (?REL ?INST2 ?INST3))
         (?REL ?INST1 ?INST3))))

(subclass IntransitiveRelation BinaryRelation)

(documentation IntransitiveRelation EnglishLanguage "A &%BinaryRelation ?REL is
intransitive only if (?REL ?INST1 ?INST2) and (?REL ?INST2 ?INST3) imply not
(?REL ?INST1 ?INST3), for all ?INST1, ?INST2, and ?INST3.")

(=>
   (instance ?REL IntransitiveRelation)
   (forall (?INST1 ?INST2 ?INST3)
      (=>
         (and
            (?REL ?INST1 ?INST2)
            (?REL ?INST2 ?INST3))
         (not
            (?REL ?INST1 ?INST3)))))

(subclass PartialOrderingRelation TransitiveRelation)
(subclass PartialOrderingRelation AntisymmetricRelation)
(subclass PartialOrderingRelation ReflexiveRelation)
(subclass PartialOrderingRelation TotalValuedRelation)

(documentation PartialOrderingRelation EnglishLanguage "A &%BinaryRelation is a partial
ordering if it is a &%ReflexiveRelation, an &%AntisymmetricRelation, and
a &%TransitiveRelation.")

(subclass TotalOrderingRelation PartialOrderingRelation)
(subclass TotalOrderingRelation TrichotomizingRelation)

(documentation TotalOrderingRelation EnglishLanguage  "A &%BinaryRelation is a
&%TotalOrderingRelation if it is a &%PartialOrderingRelation
and a &%TrichotomizingRelation.")

(=>
   (instance ?REL TotalOrderingRelation)
   (forall (?INST1 ?INST2)
      (and
         (or
            (?REL ?INST1 ?INST2)
            (?REL ?INST2 ?INST1))
         (or
            (not (?REL ?INST1 ?INST2))
            (not (?REL ?INST2 ?INST1))))))

(subclass EquivalenceRelation TransitiveRelation)
(subclass EquivalenceRelation SymmetricRelation)
(subclass EquivalenceRelation ReflexiveRelation)

(documentation EquivalenceRelation EnglishLanguage "A &%BinaryRelation is an equivalence
relation if it is a &%ReflexiveRelation, a &%SymmetricRelation, and a
&%TransitiveRelation.")

(subclass CaseRole BinaryPredicate)
(subclass CaseRole InheritableRelation)
(subclass CaseRole AsymmetricRelation)

(documentation CaseRole EnglishLanguage "The &%Class of &%Predicates relating the
spatially distinguished parts of a &%Process. &%CaseRoles include, for
example, the &%agent, &%patient or &%destination of an action, the flammable
substance in a burning process, or the water that falls in rain.")

(documentation involvedInEvent EnglishLanguage "(involvedInEvent ?EVENT ?THING) means
that in the &%Process ?EVENT, the &%Entity ?THING plays some &%CaseRole.")

(instance involvedInEvent BinaryPredicate)
(instance involvedInEvent AsymmetricRelation)
(domain involvedInEvent 1 Process)
(domain involvedInEvent 2 Entity)

; AP - this axiom below seems questionable, what about relations we just haven't
; "discovered" yet.
;(=>
;  (involvedInEvent ?E ?T)
;  (exists (?R)
;    (and
;      (instance ?R CaseRole)
;      (subrelation ?R involvedInEvent)
;      (?R ?E ?T))))

(=>
  (instance ?R CaseRole)
  (subrelation ?R involvedInEvent))

(instance agent CaseRole)
(instance agent PartialValuedRelation)
(domain agent 1 Process)
(domain agent 2 Agent)
(subrelation agent involvedInEvent)

(documentation agent EnglishLanguage "(&%agent ?PROCESS ?AGENT) means that ?AGENT is
an active determinant, either animate or inanimate, of the &%Process
?PROCESS, with or without voluntary intention.  For example, Eve is an
&%agent in the following proposition: Eve bit an apple.")

(instance destination CaseRole)
(instance destination PartialValuedRelation)
(domain destination 1 Process)
(domain destination 2 Entity)
(subrelation destination involvedInEvent)

(documentation destination EnglishLanguage "(destination ?PROCESS ?GOAL) means that
?GOAL is the target or goal of the Process ?PROCESS.  For example,
Danbury would be the destination in the following proposition:  Bob went
to Danbury.  Note that this is a very general &%CaseRole and, in
particular, that it covers the concepts of 'recipient' and 'beneficiary'.
Thus, John would be the &%destination in the following proposition:
Tom gave a book to John.")

(instance experiencer CaseRole)
(instance experiencer PartialValuedRelation)
(domain experiencer 1 Process)
(domain experiencer 2 Agent)
(subrelation experiencer involvedInEvent)

(documentation experiencer EnglishLanguage "(&%experiencer ?PROCESS ?AGENT) means
that ?AGENT experiences the &%Process ?PROCESS.  For example, Yojo
is the &%experiencer of seeing in the following proposition:  Yojo
sees the fish.  Note that &%experiencer, unlike &%agent, does
not entail a causal relation between its arguments.")

(subrelation instrument patient)
(instance instrument CaseRole)
(instance instrument PartialValuedRelation)
(domain instrument 1 Process)
(domain instrument 2 Object)

(documentation instrument EnglishLanguage "(instrument ?EVENT ?TOOL) means that ?TOOL
is used by an agent in bringing about ?EVENT and that ?TOOL is not
changed by ?EVENT.  For example, the key is an &%instrument in the
following proposition: The key opened the door.  Note that &%instrument
and &%resource cannot be satisfied by the same ordered pair.")

(instance origin CaseRole)
(instance origin PartialValuedRelation)
(domain origin 1 Process)
(domain origin 2 Object)
(subrelation origin involvedInEvent)

(documentation origin EnglishLanguage "(&%origin ?PROCESS ?SOURCE) means that ?SOURCE
indicates where the ?Process began.  Note that this relation implies
that ?SOURCE is present at the beginning of the process, but need not
participate throughout the process.  For example, the submarine is the
&%origin in the following proposition: the missile was launched from a
submarine.")

(instance patient CaseRole)
(instance patient PartialValuedRelation)
(domain patient 1 Process)
(domain patient 2 Entity)
(subrelation patient involvedInEvent)

(documentation patient EnglishLanguage "(&%patient ?PROCESS ?ENTITY) means that ?ENTITY
is a participant in ?PROCESS that may be moved, said, experienced, etc.
For example, the direct objects in the sentences 'The cat swallowed the
canary' and 'Billy likes the beer' would be examples of &%patients.  Note
that the &%patient of a &%Process may or may not undergo structural
change as a result of the &%Process.  The &%CaseRole of &%patient is used
when one wants to specify as broadly as possible the object of a
&%Process.")

(subrelation resource patient)
(instance resource CaseRole)
(instance resource PartialValuedRelation)
(domain resource 1 Process)
(domain resource 2 Object)
(disjointRelation resource result)
(disjointRelation resource instrument)
(disjointRelation result instrument)

(documentation resource EnglishLanguage "(&%resource ?PROCESS ?RESOURCE) means that
?RESOURCE is present at the beginning of ?PROCESS, is used by ?PROCESS,
and as a consequence is changed by ?PROCESS.  For example, soap is a
&%resource in the following proposition:  the gun was carved out of soap.
Note that &%resource differs from &%instrument, another subrelation of
&%patient, in that its internal or physical properties are altered in
some way by the &%Process.")

(documentation resourceExhausted EnglishLanguage "(&%resourceExhausted ?PROCESS ?RESOURCE)
means that ?RESOURCE is present at the beginning of ?PROCESS, is used by ?PROCESS, and as
a consequence is completely used up by the ?PROCESS. For example, fuel is a  &%resourceExhausted
in the following proposition: the plane run out of fuel and ditched in the sea.")

(domain resourceExhausted 1 Process)
(domain resourceExhausted 2 Object)
(instance resourceExhausted CaseRole)
(instance resourceExhausted AsymmetricRelation)
(instance resourceExhausted BinaryPredicate)
(instance resourceExhausted PartialValuedRelation)

(=>
    (and
        (resourceExhausted ?P ?R)
        (instance ?R ?C))
    (holdsDuring (ImmediateFutureFn (WhenFn ?P))
        (not
            (exists (?OBJ1)
                (and
                    (part ?OBJ1 ?R)
                    (instance ?OBJ1 ?C))))))

(subrelation result patient)
(instance result CaseRole)
(instance result PartialValuedRelation)
(domain result 1 Process)
(domain result 2 Entity)

(documentation result EnglishLanguage "(result ?ACTION ?OUTPUT) means that ?OUTPUT is
a product of ?ACTION.  For example, house is a &%result in the
following proposition: Eric built a house.")

(subclass InheritableRelation Relation)

(documentation InheritableRelation EnglishLanguage "The class of &%Relations whose
properties can be inherited downward in the class hierarchy via the
&%subrelation &%Predicate.")

(subclass ProbabilityRelation Relation)
(subclass ProbabilityRelation InheritableRelation)

(documentation ProbabilityRelation EnglishLanguage "The &%Class of &%Relations that
permit assessment of the probability of an event or situation.")

(instance ProbabilityFn ProbabilityRelation)
(instance ProbabilityFn TotalValuedRelation)
(instance ProbabilityFn UnaryFunction)
(domain ProbabilityFn 1 Formula)
(range ProbabilityFn RealNumber)

(documentation ProbabilityFn EnglishLanguage "One of the basic &%ProbabilityRelations,
&%ProbabilityFn is used to state the a priori probability of a state of
affairs.  (&%ProbabilityFn ?FORMULA) denotes the a priori probability
of ?FORMULA.")

(instance conditionalProbability ProbabilityRelation)
(instance conditionalProbability TernaryPredicate)
(domain conditionalProbability 1 Formula)
(domain conditionalProbability 2 Formula)
(domain conditionalProbability 3 RealNumber)

(documentation conditionalProbability EnglishLanguage "One of the basic &%ProbabilityRelations.
&%conditionalProbability is used to state the numeric value of a conditional
probability.  (&%conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER) means
that the probability of ?FORMULA2 being true given that ?FORMULA1 is true is
?NUMBER.")

(instance increasesLikelihood ProbabilityRelation)
(instance increasesLikelihood BinaryPredicate)
(instance increasesLikelihood IrreflexiveRelation)
(domain increasesLikelihood 1 Formula)
(domain increasesLikelihood 2 Formula)
(disjointRelation increasesLikelihood decreasesLikelihood)
(disjointRelation increasesLikelihood independentProbability)
(disjointRelation decreasesLikelihood independentProbability)

(documentation increasesLikelihood EnglishLanguage "One of the basic &%ProbabilityRelations.
(&%increasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is more
likely to be true if ?FORMULA1 is true.")

(=>
   (and
      (increasesLikelihood ?FORMULA1 ?FORMULA2)
      (equal (ProbabilityFn ?FORMULA2) ?NUMBER1)
      (conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER2))
   (greaterThan ?NUMBER2 ?NUMBER1))

(instance decreasesLikelihood ProbabilityRelation)
(instance decreasesLikelihood BinaryPredicate)
(instance decreasesLikelihood IrreflexiveRelation)
(domain decreasesLikelihood 1 Formula)
(domain decreasesLikelihood 2 Formula)

(documentation decreasesLikelihood EnglishLanguage "One of the basic &%ProbabilityRelations.
(&%decreasesLikelihood ?FORMULA1 ?FORMULA2) means that ?FORMULA2 is less
likely to be true if ?FORMULA1 is true.")

(=>
   (and
      (decreasesLikelihood ?FORMULA1 ?FORMULA2)
      (equal (ProbabilityFn ?FORMULA2) ?NUMBER1)
      (conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER2))
   (lessThan ?NUMBER2 ?NUMBER1))

(instance independentProbability ProbabilityRelation)
(instance independentProbability BinaryPredicate)
(instance independentProbability SymmetricRelation)
(domain independentProbability 1 Formula)
(domain independentProbability 2 Formula)

(documentation independentProbability EnglishLanguage "One of the basic &%ProbabilityRelations.
(&%independentProbability ?FORMULA1 ?FORMULA2) means that the probabilities of
?FORMULA1 and ?FORMULA2 being true are independent.")

(=>
   (and
      (independentProbability ?FORMULA1 ?FORMULA2)
      (equal (ProbabilityFn ?FORMULA2) ?NUMBER1)
      (conditionalProbability ?FORMULA1 ?FORMULA2 ?NUMBER2))
   (equal ?NUMBER2 ?NUMBER1))

(=>
   (and
      (instance ?FORMULA1 Formula)
      (instance ?FORMULA2 Formula))
   (or
      (increasesLikelihood ?FORMULA1 ?FORMULA2)
      (decreasesLikelihood ?FORMULA1 ?FORMULA2)
      (independentProbability ?FORMULA1 ?FORMULA2)))

(subclass SpatialRelation Relation)
(subclass SpatialRelation InheritableRelation)

(documentation SpatialRelation EnglishLanguage "The &%Class of &%Relations that are
spatial in a wide sense.  This &%Class includes mereological relations
and topological relations.")

(subclass TemporalRelation Relation)
(subclass TemporalRelation InheritableRelation)

(documentation TemporalRelation EnglishLanguage "The &%Class of temporal &%Relations.
This &%Class includes notions of (temporal) topology of intervals,
(temporal) schemata, and (temporal) extension.")

(subclass IntentionalRelation InheritableRelation)
(subclass IntentionalRelation Relation)

(documentation IntentionalRelation EnglishLanguage "The &%Class of &%Relations between
an &%Agent and one or more &%Entities, where the &%Relation requires that
the &%Agent have awareness of the &%Entity.")

(=>
   (and
      (instance ?REL IntentionalRelation)
      (?REL ?AGENT @ROW)
      (inList ?OBJ (ListFn @ROW)))
   (inScopeOfInterest ?AGENT ?OBJ))

(instance prefers TernaryPredicate)
(instance prefers IntentionalRelation)
(domain prefers 1 CognitiveAgent)
(domain prefers 2 Formula)
(domain prefers 3 Formula)

(documentation prefers EnglishLanguage "(&%prefers ?AGENT ?FORMULA1 ?FORMULA2) means that
&%CognitiveAgent ?AGENT prefers the state of affairs expressed by ?FORMULA1
over the state of affairs expressed by ?FORMULA2 all things being equal.")

(subclass PropositionalAttitude IntentionalRelation)
(subclass PropositionalAttitude AsymmetricRelation)
(subclass PropositionalAttitude InheritableRelation)

(documentation PropositionalAttitude EnglishLanguage "The &%Class of
&%IntentionalRelations where the &%Agent has awareness of a
&%Proposition.")

(=>
   (and
      (instance ?REL PropositionalAttitude)
      (?REL ?AGENT ?FORMULA))
   (instance ?FORMULA Formula))

(subclass ObjectAttitude IntentionalRelation)
(subclass ObjectAttitude InheritableRelation)
(disjoint ObjectAttitude PropositionalAttitude)

(documentation ObjectAttitude EnglishLanguage "The &%Class of &%IntentionalRelations
where the &%Agent has awareness of an instance of &%Physical.")

(=>
   (and
      (instance ?REL ObjectAttitude)
      (?REL ?AGENT ?THING))
   (instance ?THING Physical))

(instance inScopeOfInterest BinaryPredicate)
(instance inScopeOfInterest IntentionalRelation)
(domain inScopeOfInterest 1 CognitiveAgent)
(domain inScopeOfInterest 2 Entity)

(documentation inScopeOfInterest EnglishLanguage "A very general &%Predicate.
(&%inScopeOfInterest ?AGENT ?ENTITY) means that ?ENTITY is within the
scope of interest of ?AGENT.  Note that the interest indicated can be
either positive or negative, i.e. the ?AGENT can have an interest in
avoiding or promoting ?ENTITY.")

(=>
  (and
    (instance ?PROCESS IntentionalProcess)
    (agent ?PROCESS ?AGENT)
    (instance ?AGENT CognitiveAgent)
    (patient ?PROCESS ?OBJECT))
  (inScopeOfInterest ?AGENT ?OBJECT))

(=>
  (inScopeOfInterest ?AGENT ?OBJECT)
  (exists (?PROCESS)
    (and
      (instance ?PROCESS IntentionalProcess)
      (agent ?PROCESS ?AGENT)
      (patient ?PROCESS ?OBJECT))))

(instance needs ObjectAttitude)
(instance needs BinaryPredicate)
(subrelation needs inScopeOfInterest)
(domain needs 1 CognitiveAgent)
(domain needs 2 Physical)

(documentation needs EnglishLanguage "(&%needs ?AGENT ?OBJECT) means that ?OBJECT is
physically required for the continued existence of ?AGENT.")

(=>
  (needs ?AGENT ?OBJECT)
  (wants ?AGENT ?OBJECT))

(instance wants ObjectAttitude)
(instance wants BinaryPredicate)
(subrelation wants inScopeOfInterest)
(relatedInternalConcept wants desires)
(domain wants 1 CognitiveAgent)
(domain wants 2 Physical)

(documentation wants EnglishLanguage "(&%wants ?AGENT ?OBJECT) means that ?OBJECT is desired by ?AGENT,
i.e. ?AGENT believes that ?OBJECT will satisfy one of its goals.  Note that there is
no implication that what is wanted by an agent is not already possessed by the agent.")

(=>
  (wants ?AGENT ?OBJ)
  (exists (?PURP)
    (hasPurposeForAgent ?OBJ ?PURP ?AGENT)))

(=>
  (and
    (wants ?AGENT ?OBJ)
    (instance ?OBJ Object))
  (desires ?AGENT
    (possesses ?AGENT ?OBJ)))

(instance desires PropositionalAttitude)
(instance desires BinaryPredicate)
(subrelation desires inScopeOfInterest)
(relatedInternalConcept desires wants)
(domain desires 1 CognitiveAgent)
(domain desires 2 Formula)

(documentation desires EnglishLanguage "(&%desires ?AGENT ?FORMULA) means that ?AGENT wants
to bring about the state of affairs expressed by ?FORMULA.  Note that there
is no implication that what is desired by the agent is not already true.
Note too that &%desires is distinguished from &%wants only in that the former
is a &%PropositionalAttitude, while &%wants is an &%ObjectAttitude.")

(instance considers PropositionalAttitude)
(instance considers BinaryPredicate)
(subrelation considers inScopeOfInterest)
(domain considers 1 CognitiveAgent)
(domain considers 2 Formula)

(documentation considers EnglishLanguage "(&%considers ?AGENT ?FORMULA) means that ?AGENT
considers or wonders about the truth of the proposition expressed by
?FORMULA.")

(instance believes PropositionalAttitude)
(instance believes BinaryPredicate)
(subrelation believes inScopeOfInterest)
(domain believes 1 CognitiveAgent)
(domain believes 2 Formula)

(documentation believes EnglishLanguage "The epistemic predicate of belief.
(&%believes ?AGENT ?FORMULA) means that ?AGENT believes the proposition
expressed by ?FORMULA.")

(=>
   (believes ?AGENT ?FORMULA)
   (exists (?TIME)
      (holdsDuring ?TIME (considers ?AGENT ?FORMULA))))

(instance knows PropositionalAttitude)
(instance knows BinaryPredicate)
(subrelation knows inScopeOfInterest)
(domain knows 1 CognitiveAgent)
(domain knows 2 Formula)

(documentation knows EnglishLanguage "The epistemic predicate of knowing.  (&%knows
?AGENT ?FORMULA) means that ?AGENT knows the proposition expressed by
?FORMULA.  Note that &%knows entails conscious awareness, so this
&%Predicate cannot be used to express tacit or subconscious or
unconscious knowledge.")

(=>
  (knows ?AGENT ?FORMULA)
  (believes ?AGENT ?FORMULA))

(=>
  (knows ?AGENT ?FORMULA)
  (truth ?FORMULA True))

(subclass TernaryRelation Relation)
(subclass TernaryRelation InheritableRelation)

(documentation TernaryRelation EnglishLanguage "&%TernaryRelations relate three items.
The two &%subclasses of &%TernaryRelation are &%TernaryPredicate and
&%BinaryFunction.")

(subclass QuaternaryRelation Relation)
(subclass QuaternaryRelation InheritableRelation)

(documentation QuaternaryRelation EnglishLanguage "&%QuaternaryRelations relate four
items.  The two &%subclasses of &%QuaternaryRelation are
&%QuaternaryPredicate and &%TernaryFunction.")

(subclass QuintaryRelation Relation)
(subclass QuintaryRelation InheritableRelation)

(documentation QuintaryRelation EnglishLanguage "&%QuintaryRelations relate five items.
The two &%subclasses of &%QuintaryRelation are &%QuintaryPredicate and
&%QuaternaryFunction.")

(subclass List Relation)

(documentation List EnglishLanguage "Every &%List is a particular ordered n-tuple of
items.  Generally speaking, &%Lists are created by means of the &%ListFn
&%Function, which takes any number of items as arguments and returns a
&%List with the items in the same order.  Anything, including other
&%Lists, may be an item in a &%List.  Note too that &%Lists are
extensional - two lists that have the same items in the same order are
identical.  Note too that a &%List may contain no items.  In that case,
the &%List is the &%NullList.")

;(=>
;  (and
;    (instance ?LIST List)
;    (not
;      (instance ?LIST NullList)))
;  (exists (?NUMBER1 ?ITEM1)
;    (and
;      (not
;        (equal (ListOrderFn ?LIST ?NUMBER1) ?ITEM1))
;      (forall (?NUMBER2)
;        (=>
;          (and
;            (instance ?NUMBER2 PositiveInteger)
;            (lessThan ?NUMBER2 ?NUMBER1))
;          (exists (?ITEM2)
;            (equal (ListOrderFn ?LIST ?NUMBER2) ?ITEM2)))))))

(subclass UniqueList List)

(documentation UniqueList EnglishLanguage "A &%List in which no item appears more than
once,i.e. a &%List for which there are no distinct numbers ?NUMBER1 and ?NUMBER2
such that (&%ListOrderFn ?LIST ?NUMBER1) and (&%ListOrderFn ?LIST ?NUMBER2)
return the same value.")

(=>
   (instance ?LIST UniqueList)
   (forall (?NUMBER1 ?NUMBER2)
      (=>
         (equal (ListOrderFn ?LIST ?NUMBER1) (ListOrderFn ?LIST ?NUMBER2))
         (equal ?NUMBER1 ?NUMBER2))))

(instance NullList List)

(documentation NullList EnglishLanguage "The &%List that has no items.  The uniqueness of
&%NullList follows from the extensionality of &%Lists, i.e. the fact that
two &%Lists with the same items in the same order are identical.")

;(<=>
;   (equal ?LIST NullList)
;   (and
;      (instance ?LIST List)
;      (not
;         (exists (?ITEM)
;            (inList ?ITEM ?LIST)))))

(instance ListFn Function)
(instance ListFn VariableArityRelation)
(domain ListFn 1 Entity)
;; (instance ListFn TotalValuedRelation) - appears to be a contradiction with VariableArityRelation
(range ListFn List)

(documentation ListFn EnglishLanguage "A &%Function that takes any number of arguments and
returns the &%List containing those arguments in exactly the same order.")

(=>
   (exhaustiveDecomposition ?CLASS @ROW)
   (forall (?OBJ)
      (=>
         (instance ?OBJ ?CLASS)
         (exists (?ITEM)
            (and
               (inList ?ITEM (ListFn @ROW))
               (instance ?OBJ ?ITEM))))))

(=>
   (disjointDecomposition ?CLASS @ROW)
   (forall (?ITEM)
      (=>
         (inList ?ITEM (ListFn @ROW))
         (subclass ?ITEM ?CLASS))))

(=>
   (disjointDecomposition ?CLASS @ROW)
   (forall (?ITEM1 ?ITEM2)
      (=>
         (and
            (inList ?ITEM1 (ListFn @ROW))
            (inList ?ITEM2 (ListFn @ROW))
            (not
               (equal ?ITEM1 ?ITEM2)))
         (disjoint ?ITEM1 ?ITEM2))))

(=>
  (disjointDecomposition ?CLASS ?ROW1 ?ROW2 ?ROW3)
  (and
    (disjoint ?ROW1 ?ROW2)
    (disjoint ?ROW2 ?ROW3)
    (disjoint ?ROW3 ?ROW1)))

(instance ListOrderFn BinaryFunction)
(instance ListOrderFn PartialValuedRelation)
(domain ListOrderFn 1 List)
(domain ListOrderFn 2 PositiveInteger)
(range ListOrderFn Entity)

(documentation ListOrderFn EnglishLanguage "(&%ListOrderFn ?LIST ?NUMBER) denotes the item
that is in the ?NUMBER position in the &%List ?LIST.  For example,
(&%ListOrderFn (&%ListFn &%Monday &%Tuesday &%Wednesday) 2) would return the
value &%Tuesday.")

;(=>
;   (and
;      (instance ?LIST1 List)
;      (not
;        (equal ?LIST1 NullList))
;      (not
;        (equal ?LIST2 NullList))
;      (instance ?LIST2 List)
;      (forall (?NUMBER)
;         (equal (ListOrderFn ?LIST1 ?NUMBER) (ListOrderFn ?LIST2 ?NUMBER))))
;   (equal ?LIST1 ?LIST2))

(=>
   (and
      (domain ?REL ?NUMBER ?CLASS)
      (instance ?REL Predicate)
      (?REL @ROW))
   (instance (ListOrderFn (ListFn @ROW) ?NUMBER) ?CLASS))

(=>
   (and
      (domainSubclass ?REL ?NUMBER ?CLASS)
      (instance ?REL Predicate)
      (?REL @ROW))
   (subclass (ListOrderFn (ListFn @ROW) ?NUMBER) ?CLASS))

(instance ListLengthFn UnaryFunction)
(instance ListLengthFn TotalValuedRelation)
(domain ListLengthFn 1 List)
(range ListLengthFn NonnegativeInteger)

(documentation ListLengthFn EnglishLanguage "A &%Function that takes a &%List as its sole
argument and returns the number of items in the &%List.  For example,
(&%ListLengthFn (&%ListFn &%Monday &%Tuesday &%Wednesday)) would return the
value 3.")

;(=>
;   (and
;      (equal (ListLengthFn ?LIST) ?NUMBER1)
;      (instance ?LIST List)
;      (not
;        (equal ?LIST NullList))
 ;     (instance ?NUMBER1 PositiveInteger))
;   (forall (?NUMBER2)
;      (<=>
;         (exists (?ITEM)
;            (and
;               (equal (ListOrderFn ?LIST ?NUMBER2) ?ITEM)
;               (inList ?ITEM ?LIST)))
;         (lessThanOrEqualTo ?NUMBER2 ?NUMBER1))))

(forall (@ROW ?ITEM)
  (equal
    (ListLengthFn (ListFn @ROW ?ITEM))
    (SuccessorFn (ListLengthFn (ListFn @ROW)))))

(forall (@ROW ?ITEM)
  (equal
    (ListOrderFn
      (ListFn @ROW ?ITEM)
      (ListLengthFn (ListFn @ROW ?ITEM))) ?ITEM))

(=>
   (and
     (valence ?REL ?NUMBER)
     (instance ?REL Predicate))
   (forall (@ROW)
      (=>
         (?REL @ROW)
         (equal (ListLengthFn (ListFn @ROW)) ?NUMBER))))

;(=>
;   (and
;      (equal (ListLengthFn ?LIST1) ?NUMBER)
;      (instance ?LIST List)
;      (not
;        (equal ?LIST NullList))
;      (instance ?NUMBER1 PositiveInteger))
;   (exists (?LIST2 ?ITEM)
;      (and
;         (initialList ?LIST1 ?LIST2)
;         (equal (SuccessorFn ?NUMBER) (ListLengthFn ?LIST2))
;         (equal (ListOrderFn ?LIST2 (SuccessorFn ?NUMBER)) ?ITEM))))

(instance ListConcatenateFn BinaryFunction)
(instance ListConcatenateFn TotalValuedRelation)
(domain ListConcatenateFn 1 List)
(domain ListConcatenateFn 2 List)
(range ListConcatenateFn List)

(documentation ListConcatenateFn EnglishLanguage "A &%Function that returns the
concatenation of the two &%Lists that are given as arguments.  For example, the value of
(&%ListConcatenateFn (&%ListFn &%Monday &%Tuesday) (&%ListFn &%Wednesday
&%Thursday)) would be (&%ListFn &%Monday &%Tuesday &%Wednesday &%Thursday).")

; previously removed to solve an obscure contradiction, but needs to be reexamined

(<=>
   (and
     (equal ?LIST3 (ListConcatenateFn ?LIST1 ?LIST2))
     (not
       (equal ?LIST1 NullList))
     (not
       (equal ?LIST2 NullList)))
   (forall (?NUMBER1 ?NUMBER2)
      (=>
         (and
            (lessThanOrEqualTo ?NUMBER1 (ListLengthFn ?LIST1))
            (lessThanOrEqualTo ?NUMBER2 (ListLengthFn ?LIST2))
            (instance ?NUMBER1 PositiveInteger)
            (instance ?NUMBER2 PositiveInteger))
         (and
            (equal (ListOrderFn ?LIST3 ?NUMBER1) (ListOrderFn ?LIST1 ?NUMBER1))
            (equal (ListOrderFn ?LIST3 (AdditionFn (ListLengthFn ?LIST1) ?NUMBER2)) (ListOrderFn ?LIST2 ?NUMBER2))))))

(instance inList BinaryPredicate)
(instance inList IrreflexiveRelation)
(instance inList AsymmetricRelation)
(instance inList PartialValuedRelation)
(domain inList 1 Entity)
(domain inList 2 List)

(documentation inList EnglishLanguage "The analog of &%element and &%instance for &%Lists.
(&%inList ?OBJ ?LIST) means that ?OBJ is in the &%List ?LIST.  For example,
(&%inList &%Tuesday (&%ListFn &%Monday &%Tuesday &%Wednesday)) would be true.")

(=>
   (inList ?ITEM ?LIST)
   (exists (?NUMBER)
      (equal (ListOrderFn ?LIST ?NUMBER) ?ITEM)))

(instance subList BinaryPredicate)
(instance subList PartialOrderingRelation)
(domain subList 1 List)
(domain subList 2 List)

(documentation subList EnglishLanguage "(&%subList ?LIST1 ?LIST2) means that ?LIST1 is a
sublist of ?LIST2, i.e. every element of ?LIST1 is an element of ?LIST2 and
the elements that are common to both &%Lists have the same order in both
&%Lists.  Elements that are common to both Lists and are consecutive in one
list must also be consecutive in the other list. (Therefore - the list of
prime numbers smaller than 10 [1 2 3 5 7] is not a subList of the
natural numbers smaller than 10 [1 2 3 4 5 6 7 8 9]).")

;(=>
;   (and
;     (subList ?LIST1 ?LIST2)
;     (not
;       (equal ?LIST1 NullList))
;     (not
;       (equal ?LIST2 NullList)))
;   (forall (?ITEM)
;      (=>
;         (inList ?ITEM ?LIST1)
;         (inList ?ITEM ?LIST2))))

;(=>
;   (and
;     (subList ?LIST1 ?LIST2)
;     (not
;       (equal ?LIST1 NullList))
;     (not
;       (equal ?LIST2 NullList)))
;   (exists (?NUMBER3)
;      (forall (?ITEM)
;         (=>
;            (inList ?ITEM ?LIST1)
;            (exists (?NUMBER1 ?NUMBER2)
;               (and
;                  (equal (ListOrderFn ?LIST1 ?NUMBER1) ?ITEM)
;                  (equal (ListOrderFn ?LIST2 ?NUMBER2) ?ITEM)
;                  (equal ?NUMBER2 (AdditionFn ?NUMBER1 ?NUMBER3))))))))

(instance SubListFn TernaryFunction)
(domain SubListFn 1 Integer)
(domain SubListFn 2 Integer)
(domain SubListFn 3 List)
(range SubListFn List)
(documentation SubListFn EnglishLanguage "A &%Function that returns a portion of the &%List that
runs from the first index to the second index - 1.  Note that lists subscripts begin at 1.")
(termFormat EnglishLanguage SubListFn "sub-list function")
(format EnglishLanguage SubListFn "the sub-list from %1 to %2 of %3")

(=>
  (and
    (equal ?R
      (SubListFn ?S ?E ?L))
    (equal
      (SubtractionFn ?E ?S)
      0))
  (equal ?R NullList))

(=>
  (and
    (equal ?R
      (SubListFn ?S ?E ?L))
    (equal
      (SubtractionFn ?E ?S)
      1))
  (equal ?R
    (ListFn
      (ListOrderFn ?L ?S))))

(=>
  (and
    (equal ?R
      (SubListFn ?S ?E ?L))
    (greaterThan
      (SubtractionFn ?E ?S)
      1))
  (equal ?R
    (ListConcatenateFn
      (ListFn
        (ListOrderFn ?L ?S))
      (SubListFn
        (AdditionFn 1 ?S) ?E ?L))))

(instance ListSumFn UnaryFunction)
(domain ListSumFn 1 List)
(range ListSumFn Number)
(documentation ListSumFn EnglishLanguage "The sum of all the numbers in a &%List.")
(format EnglishLanguage ListSumFn "the &%sum of %1")
(termFormat EnglishLanguage ListSumFn "the &%sum of elements in %1")

(=>
  (and
    (equal ?SUM (ListSumFn ?L))
    (equal ?N (ListOrderFn ?L ?S)))
  (instance ?N Number))

(=>
  (and
    (equal ?A (ListSumFn ?L))
    (equal 1 (ListLengthFn ?L)))
  (equal ?A (ListOrderFn ?L 1)))

(=>
  (and
    (equal ?A (ListSumFn ?L))
    (greaterThan (ListLengthFn ?L) 1))
  (equal ?A
    (AdditionFn
      (FirstFn ?L)
      (ListSumFn
        (SubListFn 2
          (ListLengthFn ?L)
          ?L)))))

(instance AverageFn UnaryFunction)
(domain AverageFn 1 List)
(range AverageFn Number)
(documentation AverageFn EnglishLanguage "The average of the &%Numbers in a &%List")
(termFormat EnglishLanguage AverageFn "average function")
(format EnglishLanguage AverageFn "the &%average of the numbers in %1")

(=>
  (and
    (equal ?A (AverageFn ?L))
    (greaterThan (ListLengthFn ?L) 0))
  (equal ?A
    (DivisionFn
      (ListSumFn ?L)
      (ListLengthFn ?L))))

(instance initialList BinaryPredicate)
(instance initialList PartialOrderingRelation)
(subrelation initialList subList)

(documentation initialList EnglishLanguage "(&%initialList ?LIST1 ?LIST2) means
that ?LIST1 is a &%subList of ?LIST2 and (&%ListOrderFn ?LIST1 ?NUMBER) returns
the same value as (&%ListOrderFn ?LIST2 ?NUMBER) for all of the values of
?NUMBER over which (&%ListOrderFn ?LIST1 ?NUMBER) is defined.")

;(=>
;   (and
;     (initialList ?LIST1 ?LIST2)
;     (not
;       (equal ?LIST1 NullList))
;     (not
;       (equal ?LIST2 NullList)))
;   (forall (?NUMBER1 ?NUMBER2)
;      (=>
;         (and
;            (equal (ListLengthFn ?LIST1) ?NUMBER1)
;            (lessThanOrEqualTo ?NUMBER2 ?NUMBER1))
;         (equal (ListOrderFn ?LIST1 ?NUMBER2) (ListOrderFn ?LIST2 ?NUMBER2)))))

(forall (@ROW ?ITEM)
  (initialList (ListFn @ROW) (ListFn @ROW ?ITEM)))

(instance identicalListItems BinaryPredicate)
(instance identicalListItems EquivalenceRelation)
(domain identicalListItems 1 List)
(domain identicalListItems 2 List)

(documentation identicalListItems EnglishLanguage "(&%identicalListItems ?LIST1 ?LIST2)
means that ?LIST1 and ?LIST2 have exactly the same items in their
respective lists.  Although ?LIST1 and ?LIST2 are required to share
exactly the same items, they may order these items differently.")

;(=>
;   (and
;     (identicalListItems ?LIST1 ?LIST2)
;     (not
;       (equal ?LIST1 NullList))
;     (not
;       (equal ?LIST2 NullList)))
;   (<=>
;      (inList ?ITEM ?LIST1)
;      (inList ?ITEM ?LIST2)))

(subclass Predicate Relation)
(subclass Predicate InheritableRelation)

(documentation Predicate EnglishLanguage "A &%Predicate is a sentence-forming &%Relation.
Each tuple in the &%Relation is a finite, ordered sequence of objects.
The fact that a particular tuple is an element of a &%Predicate is denoted
by '(*predicate* arg_1 arg_2 .. arg_n)', where the arg_i are the
objects so related.  In the case of &%BinaryPredicates, the fact can
be read as `arg_1 is *predicate* arg_2' or `a *predicate* of
arg_1 is arg_2'.")

(subclass Function SingleValuedRelation)
(subclass Function InheritableRelation)

(documentation Function EnglishLanguage "A &%Function is a term-forming &%Relation that
maps from a n-tuple of arguments to a range and that associates this
n-tuple with at most one range element.  Note that the range is a &%SetOrClass,
and each element of the range is an instance of the &%SetOrClass.")

(subclass UnaryFunction Function)
(subclass UnaryFunction BinaryRelation)
(subclass UnaryFunction InheritableRelation)

(documentation UnaryFunction EnglishLanguage "The &%Class of &%Functions that require a
single argument.")

(=>
   (instance ?FUNCTION UnaryFunction)
   (valence ?FUNCTION 1))

(subclass OneToOneFunction UnaryFunction)

(documentation OneToOneFunction EnglishLanguage "The &%Class of &%UnaryFunctions which
are one to one.  A function F is one to one just in case for all X, Y in the
domain of F, if X is not identical to Y, then F(X) is not identical to F(Y).")

(=>
   (instance ?FUN OneToOneFunction)
   (forall (?ARG1 ?ARG2)
      (=>
         (and
            (domain ?FUN 1 ?CLASS)
            (instance ?ARG1 ?CLASS)
            (instance ?ARG2 ?CLASS)
            (not (equal ?ARG1 ?ARG2)))
         (not (equal (AssignmentFn ?FUN ?ARG1) (AssignmentFn ?FUN ?ARG2))))))

(subclass SequenceFunction OneToOneFunction)

(documentation SequenceFunction EnglishLanguage "The &%Class of &%OneToOneFunctions whose
rangeis a subclass of the &%PositiveIntegers.")

(=>
   (and
      (instance ?SEQ SequenceFunction)
      (range ?SEQ ?CLASS))
   (subclass ?CLASS Integer))

(subclass BinaryFunction Function)
(subclass BinaryFunction TernaryRelation)
(subclass BinaryFunction InheritableRelation)

(documentation BinaryFunction EnglishLanguage "The &%Class of &%Functions that require
two arguments.")

(=>
  (instance ?FUNCTION BinaryFunction)
  (valence ?FUNCTION 2))

(subclass AssociativeFunction BinaryFunction)

(documentation AssociativeFunction EnglishLanguage "A &%BinaryFunction is associative if
bracketing has no effect on the value returned by the &%Function.  More
precisely, a &%Function ?FUNCTION is associative just in case
(?FUNCTION ?INST1 (?FUNCTION ?INST2 ?INST3)) is equal to
(?FUNCTION (?FUNCTION ?INST1 ?INST2) ?INST3), for all ?INST1, ?INST2,
and ?INST3.")

(=>
   (instance ?FUNCTION AssociativeFunction)
   (forall (?INST1 ?INST2 ?INST3)
      (=>
         (and
            (domain ?FUNCTION 1 ?CLASS)
            (instance ?INST1 ?CLASS)
            (instance ?INST2 ?CLASS)
            (instance ?INST3 ?CLASS))
         (equal (AssignmentFn ?FUNCTION ?INST1 (AssignmentFn ?FUNCTION ?INST2 ?INST3))
             (AssignmentFn ?FUNCTION (AssignmentFn ?FUNCTION ?INST1 ?INST2) ?INST3)))))

(subclass CommutativeFunction BinaryFunction)

(documentation CommutativeFunction EnglishLanguage "A &%BinaryFunction is commutative if
the ordering of the arguments of the function has no effect on the value
returned by the function.  More precisely, a function ?FUNCTION is
commutative just in case (?FUNCTION ?INST1 ?INST2) is equal to (?FUNCTION
?INST2 ?INST1), for all ?INST1 and ?INST2.")

(=>
   (instance ?FUNCTION CommutativeFunction)
   (forall (?INST1 ?INST2)
      (=>
         (and
            (domain ?FUNCTION 1 ?CLASS)
            (instance ?INST1 ?CLASS)
            (instance ?INST2 ?CLASS))
         (equal (AssignmentFn ?FUNCTION ?INST1 ?INST2)
                (AssignmentFn ?FUNCTION ?INST2 ?INST1)))))

(subclass TernaryFunction Function)
(subclass TernaryFunction QuaternaryRelation)
(subclass TernaryFunction InheritableRelation)

(documentation TernaryFunction EnglishLanguage "The &%Class of &%Functions that require
exactly three arguments.")

(=>
  (instance ?FUNCTION TernaryFunction)
  (valence ?FUNCTION 3))

(subclass QuaternaryFunction Function)
(subclass QuaternaryFunction QuintaryRelation)
(subclass QuaternaryFunction InheritableRelation)

(documentation QuaternaryFunction EnglishLanguage "The &%Class of &%Functions that require
exactly four arguments.")

(=>
  (instance ?FUNCTION QuaternaryFunction)
  (valence ?FUNCTION 4))

(subclass ContinuousFunction Function)

(documentation ContinuousFunction EnglishLanguage "&%Functions which are continuous.
This concept is taken as primitive until representations for limits
are devised.")

(subclass BinaryPredicate Predicate)
(subclass BinaryPredicate BinaryRelation)
(subclass BinaryPredicate InheritableRelation)

(documentation BinaryPredicate EnglishLanguage "A &%Predicate relating two items - its
valence is two.")

(=>
  (instance ?REL BinaryPredicate)
  (valence ?REL 2))

(subclass TernaryPredicate Predicate)
(subclass TernaryPredicate TernaryRelation)
(subclass TernaryPredicate InheritableRelation)

(documentation TernaryPredicate EnglishLanguage "The &%Class of &%Predicates that require
exactly three arguments.")

(=>
  (instance ?REL TernaryPredicate)
  (valence ?REL 3))

(subclass QuaternaryPredicate Predicate)
(subclass QuaternaryPredicate QuaternaryRelation)
(subclass QuaternaryPredicate InheritableRelation)

(documentation QuaternaryPredicate EnglishLanguage "The &%Class of &%Predicates that
require four arguments.")

(=>
  (instance ?REL QuaternaryPredicate)
  (valence ?REL 4))

(subclass QuintaryPredicate Predicate)
(subclass QuintaryPredicate QuintaryRelation)
(subclass QuintaryPredicate InheritableRelation)

(documentation QuintaryPredicate EnglishLanguage "The &%Class of &%Predicates that
require five arguments.")

(=>
  (instance ?REL QuintaryPredicate)
  (valence ?REL 5))

(subclass VariableArityRelation Relation)

(documentation VariableArityRelation EnglishLanguage "The &%Class of &%Relations that
do not have a fixed number of arguments.")

(=>
  (instance ?REL VariableArityRelation)
  (not
    (exists (?INT)
    (valence ?REL ?INT))))

(subclass RelationExtendedToQuantities Relation)
(subclass RelationExtendedToQuantities InheritableRelation)

(documentation RelationExtendedToQuantities EnglishLanguage "A
&%RelationExtendedToQuantities is a &%Relation that, when it is true on
a sequence of arguments that are &%RealNumbers, it is also true on a
sequence of instances of &%ConstantQuantity with those magnitudes in some unit of
measure.  For example, the &%lessThan relation is extended to quantities.
This means that for all pairs of quantities ?QUANTITY1 and ?QUANTITY2,
(&%lessThan ?QUANTITY1 ?QUANTITY2) if and only if, for some ?NUMBER1,
?NUMBER2, and ?UNIT, ?QUANTITY1 = (&%MeasureFn ?NUMBER1 ?UNIT),
?QUANTITY2 = (&%MeasureFn ?NUMBER2 ?UNIT), and (&%lessThan ?NUMBER1 ?NUMBER2),
for all units ?UNIT on which ?QUANTITY1 and ?QUANTITY2 can be measured.
Note that, when a &%RelationExtendedToQuantities is extended from
&%RealNumbers to instances of &%ConstantQuantity, the &%ConstantQuantity must be
measured along the same physical dimension.")

(subclass LogicalOperator Predicate)

(documentation LogicalOperator EnglishLanguage "This &%Class comprises all
of the logical operators (viz. 'and', 'or', 'not', '=>', and '<=>').")

(subclass Proposition Abstract)
(documentation Proposition EnglishLanguage "&%Propositions are &%Abstract entities that
express a complete thought or a set of such thoughts.  As an example,
the formula '(instance Yojo Cat)' expresses the &%Proposition that the
entity named Yojo is an element of the &%Class of Cats.  Note that
propositions are not restricted to the content expressed by individual
sentences of a &%Language.  They may encompass the content expressed by
theories, books, and even whole libraries.  It is important to distinguish
&%Propositions from the &%ContentBearingObjects that express them.  A
&%Proposition is a piece of information, e.g. that the cat is on the mat,
but a &%ContentBearingObject is an &%Object that represents this information.
A &%Proposition is an abstraction that may have multiple representations:
strings, sounds, icons, etc.  For example, the &%Proposition that the cat is
on the mat is represented here as a string of graphical characters displayed
on a monitor and/or printed on paper, but it can be represented by a sequence
of sounds or by some non-latin alphabet or by some cryptographic form.")

(instance closedOn BinaryPredicate)
(instance closedOn AsymmetricRelation)
(domain closedOn 1 Function)
(domain closedOn 2 SetOrClass)

(documentation closedOn EnglishLanguage "A &%BinaryFunction is closed on a &%SetOrClass
if it is defined for all instances of the &%SetOrClass and its value is
always an instance of the &%SetOrClass.")

;(=>
;   (and
;      (closedOn ?FUNCTION ?CLASS)
;      (instance ?FUNCTION UnaryFunction))
;   (forall (?INST)
;      (=>
;         (instance ?INST ?CLASS)
;         (instance (AssignmentFn ?FUNCTION ?INST) ?CLASS))))

;(=>
;   (and
;      (closedOn ?FUNCTION ?CLASS)
;      (instance ?FUNCTION BinaryFunction))
;   (forall (?INST1 ?INST2)
;      (=>
;         (and
;            (instance ?INST1 ?CLASS)
;            (instance ?INST2 ?CLASS))
;         (instance (AssignmentFn ?FUNCTION ?INST1 ?INST2) ?CLASS))))

(instance reflexiveOn BinaryPredicate)
(instance reflexiveOn AsymmetricRelation)
(domain reflexiveOn 1 BinaryRelation)
(domain reflexiveOn 2 SetOrClass)

(documentation reflexiveOn EnglishLanguage "A &%BinaryRelation is reflexive on a
&%SetOrClass only if every instance of the &%SetOrClass bears the relation
to itself.")

(=>
   (and
     (reflexiveOn ?RELATION ?CLASS)
     (instance ?RELATION Predicate))
   (forall (?INST)
      (=>
         (instance ?INST ?CLASS)
         (?RELATION ?INST ?INST))))

(instance irreflexiveOn BinaryPredicate)
(instance irreflexiveOn AsymmetricRelation)
(domain irreflexiveOn 1 BinaryRelation)
(domain irreflexiveOn 2 SetOrClass)

(documentation irreflexiveOn EnglishLanguage "A &%BinaryRelation is irreflexive on a
&%SetOrClass only if no instance of the &%SetOrClass bears the relation to
itself.")

(=>
   (and
     (irreflexiveOn ?RELATION ?CLASS)
     (instance ?RELATION Predicate))
   (forall (?INST)
      (=>
         (instance ?INST ?CLASS)
         (not
            (?RELATION ?INST ?INST)))))

(instance partialOrderingOn BinaryPredicate)
(instance partialOrderingOn AsymmetricRelation)
(domain partialOrderingOn 1 BinaryRelation)
(domain partialOrderingOn 2 SetOrClass)

(documentation partialOrderingOn EnglishLanguage "A &%BinaryRelation is a partial
ordering on a &%SetOrClass only if the relation is &%reflexiveOn the
&%SetOrClass, and it is both an &%AntisymmetricRelation, and a
&%TransitiveRelation.")

(=>
   (partialOrderingOn ?RELATION ?CLASS)
   (and
      (reflexiveOn ?RELATION ?CLASS)
      (instance ?RELATION TransitiveRelation)
      (instance ?RELATION AntisymmetricRelation)))

(instance totalOrderingOn BinaryPredicate)
(instance totalOrderingOn AsymmetricRelation)
(domain totalOrderingOn 1 BinaryRelation)
(domain totalOrderingOn 2 SetOrClass)

(documentation totalOrderingOn EnglishLanguage "A &%BinaryRelation ?REL is a total
ordering on a &%SetOrClass only if it is a partial ordering for which either
(?REL ?INST1 ?INST2) or (?REL ?INST2 ?INST1) for every ?INST1 and ?INST2
in the &%SetOrClass.")

(<=>
     (totalOrderingOn ?RELATION ?CLASS)
     (and
          (partialOrderingOn ?RELATION ?CLASS)
          (trichotomizingOn ?RELATION ?CLASS)))

(instance trichotomizingOn BinaryPredicate)
(instance trichotomizingOn AsymmetricRelation)
(domain trichotomizingOn 1 BinaryRelation)
(domain trichotomizingOn 2 SetOrClass)

(documentation trichotomizingOn EnglishLanguage "A &%BinaryRelation ?REL is
trichotomizing on a &%SetOrClass only if, for all instances ?INST1 and ?INST2
of the &%SetOrClass, at least one of the following holds:  (?REL ?INST1 ?INST2),
(?REL ?INST2 ?INST1) or (equal ?INST1 ?INST2).")

(=>
   (and
     (trichotomizingOn ?RELATION ?CLASS)
     (instance ?RELATION Predicate))
   (forall (?INST1 ?INST2)
      (=>
         (and
            (instance ?INST1 ?CLASS)
            (instance ?INST2 ?CLASS))
         (or
            (?RELATION ?INST1 ?INST2)
            (?RELATION ?INST2 ?INST1)
            (equal ?INST1 ?INST2)))))

(instance equivalenceRelationOn BinaryPredicate)
(instance equivalenceRelationOn AsymmetricRelation)
(domain equivalenceRelationOn 1 BinaryRelation)
(domain equivalenceRelationOn 2 SetOrClass)

(documentation equivalenceRelationOn EnglishLanguage "A &%BinaryRelation is an
&%equivalenceRelationOn a &%SetOrClass only if the relation is &%reflexiveOn
the &%SetOrClass and it is both a &%TransitiveRelation and a
&%SymmetricRelation.")

(=>
   (equivalenceRelationOn ?RELATION ?CLASS)
   (and
      (instance ?RELATION TransitiveRelation)
      (instance ?RELATION SymmetricRelation)
      (reflexiveOn ?RELATION ?CLASS)))

(instance distributes BinaryPredicate)
(domain distributes 1 BinaryFunction)
(domain distributes 2 BinaryFunction)

(documentation distributes EnglishLanguage "A &%BinaryFunction ?FUNCTION1 is distributive
over another &%BinaryFunction ?FUNCTION2 just in case
(?FUNCTION1 ?INST1 (?FUNCTION2 ?INST2 ?INST3)) is equal to
(?FUNCTION2 (?FUNCTION1 ?INST1 ?INST2) (?FUNCTION1 ?INST1 ?INST3)),
for all ?INST1, ?INST2, and ?INST3.")

;(=>
;   (distributes ?FUNCTION1 ?FUNCTION2)
;   (forall (?INST1 ?INST2 ?INST3)
;      (=>
;         (and
;            (domain ?FUNCTION1 1 ?CLASS1)
;            (instance ?INST1 ?CLASS1)
;            (instance ?INST2 ?CLASS1)
;            (instance ?INST3 ?CLASS1)
;            (domain ?FUNCTION2 1 ?CLASS2)
;            (instance ?INST1 ?CLASS2)
;            (instance ?INST2 ?CLASS2)
;            (instance ?INST3 ?CLASS2))
;         (equal
;           (AssignmentFn ?FUNCTION1 ?INST1
;             (AssignmentFn ?FUNCTION2 ?INST2 ?INST3))
;           (AssignmentFn ?FUNCTION2
;             (AssignmentFn ?FUNCTION1 ?INST1 ?INST2)
;             (AssignmentFn ?FUNCTION1 ?INST1 ?INST3))))))

(documentation relatedEvent EnglishLanguage "(relatedEvent ?EVENT1 ?EVENT2) means
that the &%Process ?EVENT1 is related to the Process ?EVENT2.  The
relationship is between separate individual events, not events and
their subprocesses.  On the other hand, two &%subProcesses of the same
overarching event may be &%relatedEvents.  The argument order does not
imply temporal ordering.")

(instance relatedEvent BinaryPredicate)
(instance relatedEvent SymmetricRelation)
(domain relatedEvent 1 Process)
(domain relatedEvent 2 Process)
(=>
  (and
    (subProcess ?S1 ?P)
    (subProcess ?S2 ?P))
  (relatedEvent ?S1 ?S2))

(instance causes BinaryPredicate)
(instance causes AsymmetricRelation)
(domain causes 1 Process)
(domain causes 2 Process)
(relatedInternalConcept causes causesSubclass)
; (subrelation causes relatedEvent)

(documentation causes EnglishLanguage "The causation relation between instances of
&%Process.(&%causes ?PROCESS1 ?PROCESS2) means that the instance of &%Process ?PROCESS1
brings about the instance of &%Process ?PROCESS2.")

(=>
  (causes ?P1 ?P2)
  (relatedEvent ?P1 ?P2))

(=>
   (instance ?PROC1 Process)
   (exists (?PROC2)
      (causes ?PROC2 ?PROC1)))
(=>
  (causes ?P1 ?P2)
  (earlier (WhenFn ?P1) (WhenFn ?P2)))

(instance causesSubclass BinaryPredicate)
(instance causesSubclass AsymmetricRelation)
(domainSubclass causesSubclass 1 Process)
(domainSubclass causesSubclass 2 Process)

(documentation causesSubclass EnglishLanguage "The causation relation
between subclasses of &%Process.
(&%causesSubclass ?PROCESS1 ?PROCESS2) means that the subclass of &%Process ?PROCESS1
brings about the subclass of &%Process ?PROCESS2, e.g. (&%causesSubclass &%Killing
&%Death).")

(=>
   (causesSubclass ?PROC1 ?PROC2)
   (forall (?INST2)
      (=>
         (instance ?INST2 ?PROC2)
         (exists (?INST1)
           (and
             (instance ?INST1 ?PROC1)
             (causes ?INST1 ?INST2))))))

(instance causesProposition BinaryPredicate)
(instance causesProposition AsymmetricRelation)
(domain causesProposition 1 Formula)
(domain causesProposition 2 Formula)

(documentation causesProposition EnglishLanguage "(&%causesProposition ?FORMULA1
?FORMULA2) means that the state of affairs described by ?FORMULA1
causes, or mechanistically brings about, the state of affairs
described by ?FORMULA2.  Note that unlike &%entails, the time
during which ?FORMULA2 holds cannot precede the time during which
?FORMULA1 holds, although ?FORMULA1 and ?FORMULA2 can hold
simultaneously.  Note, also, that &%causesProposition is a
predicate, not a truth function.  The following rule
(contraposition) does not hold: (=> (causesProp ?FORMULA1
?FORMULA2) (causesProp (not ?FORMULA2) (not ?FORMULA1))).")

(=>
  (and
    (holdsDuring ?T2 ?SIT2)
    (holdsDuring ?T1 ?SIT1)
    (instance ?T1 TimeInterval)
    (instance ?T2 TimeInterval)
    (causesProposition ?SIT1 ?SIT2))
  (beforeOrEqual (BeginFn ?T1) (BeginFn ?T2)))

(instance copy BinaryPredicate)
(instance copy EquivalenceRelation)
(domain copy 1 Object)
(domain copy 2 Object)

(documentation copy EnglishLanguage "relates an &%Object to an exact copy of the
&%Object, where an exact copy is indistinguishable from the original
with regard to every property except (possibly) spatial and/or temporal
location.")

(=>
   (copy ?OBJ1 ?OBJ2)
   (forall (?ATTR)
      (=>
         (attribute ?OBJ1 ?ATTR)
         (attribute ?OBJ2 ?ATTR))))

(instance time BinaryPredicate)
(instance time TemporalRelation)
(instance time AsymmetricRelation)
(instance time TotalValuedRelation)
(domain time 1 Physical)
(domain time 2 TimePosition)
(relatedInternalConcept time located)
(relatedInternalConcept time holdsDuring)

(documentation time EnglishLanguage "This relation holds between an instance of
&%Physical and an instance of &%TimePosition just in case the temporal
lifespan of the former includes the latter.  In other words, (&%time
?THING ?TIME) means that ?THING existed or occurred at ?TIME.  Note
that &%time does for instances of &%time what &%holdsDuring does
for instances of &%Formula. The constants &%located and &%time are
the basic spatial and temporal predicates, respectively.")

(instance holdsDuring BinaryPredicate)
(instance holdsDuring AsymmetricRelation)
(domain holdsDuring 1 TimePosition)
(domain holdsDuring 2 Formula)

(documentation holdsDuring EnglishLanguage "(&%holdsDuring ?TIME ?FORMULA) means that the
proposition denoted by ?FORMULA is true in the time frame ?TIME.  Note
that this implies that ?FORMULA is true at every &%TimePoint which is a
&%temporalPart of ?TIME.")

(=>
   (and
      (holdsDuring ?TIME ?SITUATION1)
      (entails ?SITUATION1 ?SITUATION2))
   (holdsDuring ?TIME ?SITUATION2))

(=>
   (holdsDuring ?TIME (not ?SITUATION))
   (not (holdsDuring ?TIME ?SITUATION)))

(instance capability TernaryPredicate)
(domainSubclass capability 1 Process)
(domain capability 2 CaseRole)
(domain capability 3 Object)

(documentation capability EnglishLanguage "(&%capability ?PROCESS ?ROLE ?OBJ) means
that ?OBJ has the ability to play the role of ?ROLE in &%Processes of
type ?PROCESS.")

(=>
   (and
      (instance ?ROLE CaseRole)
      (?ROLE ?ARG1 ?ARG2)
      (instance ?ARG1 ?PROC)
      (subclass ?PROC Process))
   (capability ?PROC ?ROLE ?ARG2))

(=>
  (capability ?PROCESS ?ROLE ?OBJ)
  (modalAttribute
    (exists (?P)
      (and
        (instance ?P ?PROCESS)
        (?ROLE ?P ?OBJ))) Possibility))

(instance exploits BinaryPredicate)
(instance exploits AsymmetricRelation)
(domain exploits 1 Object)
(domain exploits 2 Agent)

(documentation exploits EnglishLanguage "(&%exploits ?OBJ ?AGENT) means that ?OBJ is used
by ?AGENT as a &%resource in an unspecified instance of &%Process.  This
&%Predicate, as its corresponding axiom indicates, is a composition of the
relations &%agent and &%resource.")

(=>
     (exploits ?OBJ ?AGENT)
     (exists (?PROCESS)
          (and
               (agent ?PROCESS ?AGENT)
               (resource ?PROCESS ?OBJ))))

(instance hasPurpose BinaryPredicate)
(instance hasPurpose AsymmetricRelation)
(domain hasPurpose 1 Physical)
(domain hasPurpose 2 Formula)

(documentation hasPurpose EnglishLanguage "This &%Predicate expresses the concept of a
conventional goal, i.e. a goal with a neutralized agent's intention.
Accordingly, (&%hasPurpose ?THING ?FORMULA) means that the instance of
&%Physical ?THING has, as its purpose, the &%Proposition expressed by
?FORMULA.  Note that there is an important difference in meaning between
the &%Predicates &%hasPurpose and &%result.  Although the second argument
of the latter can satisfy the second argument of the former,
a conventional goal is an expected and desired outcome, while a result
may be neither expected nor desired.  For example, a machine process may
have outcomes but no goals, aimless wandering may have an outcome but no
goal, a learning process may have goals with no outcomes, and so on.")

(instance hasPurposeForAgent TernaryPredicate)
(domain hasPurposeForAgent 1 Physical)
(domain hasPurposeForAgent 2 Formula)
(domain hasPurposeForAgent 3 Agent)

(documentation hasPurposeForAgent EnglishLanguage "Expresses a cognitive attitude of an
agent with respect to a particular instance of Physical.  More precisely,
(&%hasPurposeForAgent ?THING ?FORMULA ?AGENT) means that the purpose of
?THING for ?AGENT is the proposition expressed by ?FORMULA.  Very complex
issues are involved here.  In particular, the rules of inference of the
first order predicate calculus are not truth-preserving for the second
argument position of this &%Predicate.")

(=>
   (hasPurpose ?THING ?PURPOSE)
   (exists (?AGENT)
      (hasPurposeForAgent ?THING ?PURPOSE ?AGENT)))

(instance hasSkill BinaryPredicate)
(instance hasSkill AsymmetricRelation)
(domainSubclass hasSkill 1 Process)
(domain hasSkill 2 Agent)

(documentation hasSkill EnglishLanguage "Similar to the &%capability &%Predicate
with the additional restriction that the ability be practised/
demonstrated to some measurable degree.")

(=>
  (hasSkill ?PROC ?AGENT)
  (capability ?PROC agent ?AGENT))

(instance confersNorm TernaryPredicate)
(domain confersNorm 1 Entity)
(domain confersNorm 2 Formula)
(domain confersNorm 3 ObjectiveNorm)

(documentation confersNorm EnglishLanguage "Expresses the relationship between a
&%Formula,an &%Entity, and an &%ObjectiveNorm when the &%Entity brings it about that
the &%Formula has the &%ObjectiveNorm.")

(=>
  (holdsDuring ?TIME 
    (confersNorm ?ENTITY ?FORMULA ?NORM))
  (and
     (holdsDuring 
       (ImmediatePastFn ?TIME) 
         (not 
           (modalAttribute ?FORMULA ?NORM)))
     (holdsDuring 
       (ImmediateFutureFn ?TIME) 
         (modalAttribute ?FORMULA ?NORM))))

(instance deprivesNorm TernaryPredicate)
(disjointRelation deprivesNorm confersNorm)
(domain deprivesNorm 1 Entity)
(domain deprivesNorm 2 Formula)
(domain deprivesNorm 3 ObjectiveNorm)

(documentation deprivesNorm EnglishLanguage "Expresses the relationship between an
&%Entity, a &%Formula, and an &%ObjectiveNorm when the &%Entity
brings it about that the &%Formula does not have the &%ObjectiveNorm.")

(=>
   (holdsDuring ?TIME 
     (deprivesNorm ?ENTITY ?FORMULA ?NORM))
   (and
      (holdsDuring 
        (ImmediatePastFn ?TIME) 
          (modalAttribute ?FORMULA ?NORM))
      (holdsDuring 
        (ImmediateFutureFn ?TIME) 
          (not (modalAttribute ?FORMULA ?NORM)))))

(instance partlyLocated SpatialRelation)
(instance partlyLocated BinaryPredicate)
(instance partlyLocated TotalValuedRelation)
(domain partlyLocated 1 Physical)
(domain partlyLocated 2 Object)

(documentation partlyLocated EnglishLanguage "(&%partlyLocated ?OBJ1 ?OBJ2) means
that the instance of &%Physical ?OBJ1 is at least partially located at ?OBJ2.  For
example, Istanbul is partly located in &%Asia and partly located in &%Europe.
Note that &%partlyLocated is the most basic localization relation:  &%located
is an immediate &%subrelation of &%partlyLocated and &%exactlyLocated is
an immediate &%subrelation of &%located.")

(=>
  (and
    (instance ?OBJ1 Object)
    (partlyLocated ?OBJ1 ?OBJ2))
  (overlapsSpatially ?OBJ1 ?OBJ2))

(=>
  (and
    (instance ?OBJ1 Object)
    (partlyLocated ?OBJ1 ?OBJ2))
  (exists (?SUB)
    (and
      (part ?SUB ?OBJ1)
      (located ?SUB ?OBJ2))))

(instance located AntisymmetricRelation)
(instance located TransitiveRelation)
(instance located TotalValuedRelation)
(subrelation located partlyLocated)

(domain located 1 Physical)
(domain located 2 Object)

(documentation located EnglishLanguage "(&%located ?OBJ1 ?OBJ2) means that ?OBJ1 is
&%partlyLocated at ?OBJ2, and there is no &%part of ?OBJ1 that is not &%located at
?OBJ2.")

(=>
  (located ?OBJ1 ?OBJ2)
  (forall (?SUB)
    (=>
      (part ?SUB ?OBJ1)
      (located ?SUB ?OBJ2))))

(instance eventPartlyLocated CaseRole)
(instance eventPartlyLocated PartialValuedRelation)

(=>
  (eventPartlyLocated ?PROC ?OJB)
  (partlyLocated ?PROC ?OJB))

(domain eventPartlyLocated 1 Process)
(domain eventPartlyLocated 2 Object)

(documentation eventPartlyLocated EnglishLanguage "(&%eventPartlyLocated ?PROC ?OBJ)
means that some &%subProcess of &%Process ?PROC is located in &%Object ?OBJ.")

(=>
  (eventPartlyLocated ?PROC ?OBJ)
  (exists (?SUB)
    (and
      (subProcess ?SUB ?PROC)
      (eventLocated ?SUB ?OBJ))))

(=>
  (origin ?PROCESS ?LOC)
  (eventPartlyLocated ?PROCESS ?LOC))

(=>
  (destination ?PROCESS ?LOC)
  (eventPartlyLocated ?PROCESS ?LOC))

(subrelation eventPartlyLocated involvedInEvent)

(subrelation eventLocated eventPartlyLocated)
(instance eventLocated CaseRole)
(instance eventLocated TotalValuedRelation)

(documentation eventLocated EnglishLanguage "(&%eventLocated ?PROC ?OBJ) means that
the entire &%Process ?PROC is located on &%Object ?OBJ, meaning that all &%subProcess
of ?PROC is located on ?OBJ.")

(=>
  (eventLocated ?PROCESS ?OBJ)
  (forall (?SUB)
    (=>
      (subProcess ?SUB ?PROCESS)
      (eventLocated ?SUB ?OBJ))))

(subrelation exactlyLocated located)
(instance exactlyLocated BinaryPredicate)

(documentation exactlyLocated EnglishLanguage "The actual, minimal location of an
Object.  This is a subrelation of the more general &%Predicate
&%located.")

(=>
   (exactlyLocated ?OBJ ?REGION)
   (not
      (exists (?OTHEROBJ)
         (and
            (exactlyLocated ?OTHEROBJ ?REGION)
            (not
               (equal ?OTHEROBJ ?OBJ))))))

(instance between SpatialRelation)
(instance between TernaryPredicate)
(domain between 1 Object)
(domain between 2 Object)
(domain between 3 Object)

(documentation between EnglishLanguage "(between ?OBJ1 ?OBJ2 ?OBJ3) means that ?OBJ2 is
spatially located between ?OBJ1 and ?OBJ3.  Note that this implies that
?OBJ2 is directly between ?OBJ1 and ?OBJ3, i.e. the projections of ?OBJ1
and ?OBJ3 overlap with ?OBJ2.")

(=>
  (between ?END1 ?MID ?END2)
  (between ?END2 ?MID ?END1))

(documentation betweenOnPath EnglishLanguage "(betweenOnPath ?OBJ1 ?OBJ2 ?OBJ3 ?PATH)
means that ?OBJ2 is spatially located between ?OBJ1 and ?OBJ3 on the path
?PATH.  Note that this is a more specialized relation of between since any
object that is between others with respect to a particular path is also
simply between them.")

(instance betweenOnPath SpatialRelation)
(instance betweenOnPath QuaternaryPredicate)
(domain betweenOnPath 1 Object)
(domain betweenOnPath 2 Object)
(domain betweenOnPath 3 Object)
(domain betweenOnPath 4 Object)

(=>
  (betweenOnPath ?OBJ1 ?OBJ2 ?OBJ3 ?PATH)
  (between ?OBJ1 ?OBJ2 ?OBJ3))

(instance traverses BinaryPredicate)
(instance traverses SpatialRelation)
(domain traverses 1 Object)
(domain traverses 2 Object)

(documentation traverses EnglishLanguage "(&%traverses ?OBJ1 ?OBJ2) means that ?OBJ1
crosses or extends across ?OBJ2.  Note that &%crosses and
&%penetrates are subrelations of &%traverses.")

(=>
   (traverses ?OBJ1 ?OBJ2)
   (or
      (crosses ?OBJ1 ?OBJ2)
      (penetrates ?OBJ1 ?OBJ2)))

(subrelation crosses traverses)
(instance crosses AsymmetricRelation)
(instance crosses TransitiveRelation)
(disjointRelation crosses connected)

(documentation crosses EnglishLanguage "(crosses ?OBJ1 ?OBJ2) means that
&%Object ?OBJ1 &%traverses Object ?OBJ2, without being &%connected
to it.")

(subrelation penetrates traverses)
(instance penetrates AsymmetricRelation)
(instance penetrates IntransitiveRelation)
(instance penetrates PartialValuedRelation)

(documentation penetrates EnglishLanguage "(penetrates ?OBJ1 ?OBJ2) means that
?OBJ1 is &%connected to ?OBJ2 along at least one whole dimension (length,
width or depth).")

(=>
  (penetrates ?X ?Y)
  (meetsSpatially ?X ?Y))

(instance WhereFn BinaryFunction)
(instance WhereFn SpatialRelation)
(instance WhereFn TotalValuedRelation)
(domain WhereFn 1 Physical)
(domain WhereFn 2 TimePoint)
(range WhereFn Region)
(relatedInternalConcept WhereFn WhenFn)

(documentation WhereFn EnglishLanguage "Maps an &%Object and a &%TimePoint at which the
&%Object exists to the &%Region where the &%Object existed at that
&%TimePoint.")

(<=>
   (equal (WhereFn ?THING ?TIME) ?REGION)
   (holdsDuring ?TIME (exactlyLocated ?THING ?REGION)))

(instance possesses BinaryPredicate)
(instance possesses AsymmetricRelation)
(domain possesses 1 Agent)
(domain possesses 2 Object)

(documentation possesses EnglishLanguage "&%Relation that holds between an &%Agent and
an &%Object when the &%Agent has ownership of the &%Object.  Note that this is distinct
from having the right to use or be located at a particular object, for example, by
&%Renting.")

(=>
   (possesses ?PERSON ?OBJ)
   (modalAttribute (uses ?OBJ ?PERSON) Permission))

(=>
  (and
    (holdsDuring ?T
      (possesses ?PERSON ?OBJ))
    (part ?P ?OBJ))
  (holdsDuring ?T
    (possesses ?PERSON ?P)))

(=>
   (and
      (instance ?TIME TimePosition)
      (holdsDuring ?TIME (possesses ?AGENT1 ?OBJ))
      (holdsDuring ?TIME (possesses ?AGENT2 ?OBJ)))
   (equal ?AGENT1 ?AGENT2))

(instance PropertyFn UnaryFunction)
(instance PropertyFn TotalValuedRelation)
(domain PropertyFn 1 Agent)
(range PropertyFn Set)

(documentation PropertyFn EnglishLanguage "A &%UnaryFunction that maps an &%Agent to the
&%Set of &%Objects owned by the &%Agent.")

(<=>
   (instance ?OBJ (PropertyFn ?PERSON))
   (possesses ?PERSON ?OBJ))

(instance precondition BinaryPredicate)
(instance precondition AsymmetricRelation)
(instance precondition TransitiveRelation)
(domainSubclass precondition 1 Process)
(domainSubclass precondition 2 Process)

(documentation precondition EnglishLanguage "A very general &%Predicate.  (&%precondition
?PROC1 ?PROC2) means that an instance of ?PROC2 can exist only if an instance of ?PROC1
also exists.")

(=>
   (precondition ?PROC1 ?PROC2)
   (=>
      (exists (?INST2) (instance ?INST2 ?PROC2))
      (exists (?INST1) (instance ?INST1 ?PROC1))))

(instance hindersSubclass BinaryPredicate)
(instance hindersSubclass IrreflexiveRelation)
(instance hindersSubclass PartialValuedRelation)
(domainSubclass hindersSubclass 1 Process)
(domainSubclass hindersSubclass 2 Process)

(documentation hindersSubclass EnglishLanguage "A very general &%Predicate.
(&%hindersSubclass
?PROC1 ?PROC2) means that the &%Process ?PROC1 hindersSubclass or hinders
the occurrence of the &%Process ?PROC2.  For example, obstructing an
object hindersSubclass moving it.  Note that this is a relation between types
of &%Processes, not between instances.")

(=>
  (hindersSubclass ?PROC1 ?PROC2)
  (forall (?TIME ?PLACE)
    (decreasesLikelihood
      (holdsDuring ?TIME
        (exists (?INST1)
          (and
            (instance ?INST1 ?PROC1)
            (eventLocated ?INST1 ?PLACE))))
      (holdsDuring ?TIME
        (exists (?INST2)
          (and
            (instance ?INST2 ?PROC2)
            (eventLocated ?INST2 ?PLACE)))))))

(instance preventsSubclass BinaryPredicate)
(instance preventsSubclass IrreflexiveRelation)
(instance preventsSubclass PartialValuedRelation)
(domainSubclass preventsSubclass 1 Process)
(domainSubclass preventsSubclass 2 Process)
(relatedInternalConcept preventsSubclass hindersSubclass)

(documentation preventsSubclass EnglishLanguage "A very general &%Predicate.
(preventsSubclass ?PROC1 ?PROC2) means that ?PROC1 preventsSubclass the occurrence of
?PROC2.  In other words, if ?PROC1 is occurring in a particular time and place, ?PROC2
cannot occur at the same time and place.  For example, innoculating preventsSubclass
contracting disease.  Note that this is a relation between types of &%Processes, not
between instances.")

(=>
  (preventsSubclass ?PROC1 ?PROC2)
  (forall (?TIME ?PLACE)
    (=>
      (holdsDuring ?TIME
        (exists (?INST1)
          (and
            (instance ?INST1 ?PROC1)
            (eventLocated ?INST1 ?PLACE))))
      (not
        (holdsDuring ?TIME
          (exists (?INST2)
            (and
              (instance ?INST2 ?PROC2)
              (eventLocated ?INST2 ?PLACE))))))))

(instance prevents BinaryPredicate)
(instance prevents IrreflexiveRelation)
(instance prevents PartialValuedRelation)
(domain prevents 1 Process)
(domainSubclass prevents 2 Process)
(relatedInternalConcept prevents preventsSubclass)
(relatedInternalConcept prevents hinders)

(documentation prevents EnglishLanguage "A very general &%Predicate.  (prevents ?PROC1 ?PROC2)
means that an instance of ?PROC1 prevents the occurrence of ?PROC2. Note the difference between
this relation and &%preventsSubclass, which is relating classes and not instance-class.")

(=>
  (and
    (prevents ?X ?P)
    (equal (WhenFn ?X) ?T)
    (eventLocated ?X ?L))
  (not
    (holdsDuring ?T
      (exists (?Y)
        (and
          (instance ?Y ?P)
          (eventLocated ?Y ?L))))))

(instance hinders BinaryPredicate)
(instance hinders IrreflexiveRelation)
(instance hinders PartialValuedRelation)
(domain hinders 1 Process)
(domainSubclass hinders 2 Process)
(relatedInternalConcept hinders hindersSubclass)

(documentation hinders EnglishLanguage "A general &%Predicate, where (hinders ?PROC1 ?PROC2)
means that an instance of ?PROC1 &%decreasesLikelihood of occurrence of ?PROC2. Compare with
&%prevents which is stronger and &%hindersSubclass which relates classes of &%Processes.")

(=>
  (hinders ?X ?PROC)
  (decreasesLikelihood
    (and
      (equal (WhenFn ?X) ?T)
      (eventLocated ?X ?L))
    (holdsDuring ?T
      (exists (?Y)
        (and
          (instance ?Y ?PROC)
          (eventLocated ?Y ?L))))))

(instance refers BinaryPredicate)
(domain refers 1 Entity)
(domain refers 2 Entity)

(documentation refers EnglishLanguage "(&%refers ?OBJ1 ?OBJ2) means that ?OBJ1
mentions or includes a reference to ?OBJ2. Note that &%refers is
more general in meaning than &%represents, because presumably something
can represent something else only if it refers to this other thing.
For example, an article whose topic is a recent change in the price of
oil may refer to many other things, e.g. the general state of the economy,
the weather in California, the prospect of global warming, the options
for alternative energy sources, the stock prices of various oil companies,
etc.")

(subrelation names refers)
(instance names BinaryPredicate)
(domain names 1 SymbolicString)

(documentation names EnglishLanguage "(&%names ?STRING ?ENTITY) means that the thing
?ENTITY has the &%SymbolicString ?STRING as its name.  Note that &%names and &%represents
are the two immediate &%subrelations of &%refers.  The predicate &%names is used
when the referring item is merely a tag without connotative content, while the
predicate &%represents is used for referring items that have such content.")

(subrelation uniqueIdentifier names)
(instance uniqueIdentifier BinaryPredicate)
(instance uniqueIdentifier SingleValuedRelation)
(instance uniqueIdentifier PartialValuedRelation)

(documentation uniqueIdentifier EnglishLanguage "The class of &%names that uniquely
identify an instance of &%Entity.  Some examples of &%uniqueIdentifiers are the keys
of tables in database applications and the ISBN (International Standard Book
Number).")

(subrelation represents refers)
(instance represents BinaryPredicate)

(documentation represents EnglishLanguage "A very general semiotics &%Predicate.
(&%represents ?THING ?ENTITY) means that ?THING in some way indicates,
expresses, connotes, pictures, describes, etc. ?ENTITY.  The &%Predicates
&%containsInformation and &%realization are subrelations of &%represents.
Note that &%represents is a subrelation of &%refers, since something can
represent something else only if it refers to this other thing.  See the
documentation string for &%names.")

(instance representsForAgent TernaryPredicate)
(domain representsForAgent 1 Entity)
(domain representsForAgent 2 Entity)
(domain representsForAgent 3 Agent)

(documentation representsForAgent EnglishLanguage "A very general predicate.
(&%representsForAgent ?ENTITY1 ?ENTITY2 ?AGENT) means that the ?AGENT
chooses to use ?ENTITY1 to 'stand for' ?ENTITY2.")

(=>
   (representsForAgent ?REP ?ENTITY ?AGENT)
   (represents ?REP ?ENTITY))

(instance representsInLanguage TernaryPredicate)
(domain representsInLanguage 1 LinguisticExpression)
(domain representsInLanguage 2 Entity)
(domain representsInLanguage 3 Language)

(documentation representsInLanguage EnglishLanguage "A very general predicate.
(&%representsInLanguage ?THING ?ENTITY ?LANGUAGE) means that the
&%LinguisticExpression ?THING stands for ?ENTITY in the &%Language
?LANGUAGE.")

(=>
   (representsInLanguage ?REP ?ENTITY ?LANGUAGE)
   (exists (?AGENT)
      (representsForAgent ?REP ?ENTITY ?AGENT)))

(instance equivalentContentClass EquivalenceRelation)
(domainSubclass equivalentContentClass 1 ContentBearingPhysical)
(domainSubclass equivalentContentClass 2 ContentBearingPhysical)

(documentation equivalentContentClass EnglishLanguage "A &%BinaryPredicate that relates
two subclasses of &%ContentBearingPhysical.  (&%equivalentContentClass ?CLASS1
?CLASS2) means that the content expressed by each instance of ?CLASS1 is
also expressed by each instance of ?CLASS2, and vice versa.  An example
would be the relationship between English and Russian editions of Agatha
Christie's 'Murder on the Orient Express'.  Note that
(&%equivalentContentClass ?CLASS1 ?CLASS2) implies (&%subsumesContentClass
?CLASS1 ?CLASS2) and (&%subsumesContentClass ?CLASS2 ?CLASS1).")

(<=>
   (and
      (subsumesContentClass ?CLASS1 ?CLASS2)
      (subsumesContentClass ?CLASS2 ?CLASS1))
   (equivalentContentClass ?CLASS1 ?CLASS2))

(instance subsumesContentClass BinaryPredicate)
(instance subsumesContentClass PartialOrderingRelation)
(domainSubclass subsumesContentClass 1 ContentBearingPhysical)
(domainSubclass subsumesContentClass 2 ContentBearingPhysical)

(documentation subsumesContentClass EnglishLanguage "A &%BinaryPredicate that relates two
subclasses of &%ContentBearingPhysical.  (&%subsumesContentClass ?CLASS1
?CLASS2) means that the content expressed by each instance of ?CLASS2 is
also expressed by each instance of ?CLASS1.  Examples include the
relationship between a poem and one of its stanzas or between a book and
one of its chapters.  Note that this is a relation between subclasses of
&%ContentBearingObject, rather than instances.  If one wants to relate
instances, the &%Predicate &%subsumesContentInstance can be used.  Note
that &%subsumesContentClass is needed in many cases.  Consider, for
example, the relation between the King James edition of the Bible and its
Book of Genesis.  This relation holds for every copy of this edition and
not just for a single instance.")

(=>
  (subsumesContentClass ?CLASS1 ?CLASS2)
  (forall (?OBJ2 ?INFO)
    (=>
      (and
        (instance ?OBJ2 ?CLASS2)
        (containsInformation ?OBJ2 ?INFO))
      (exists (?OBJ1)
        (and
          (instance ?OBJ1 ?CLASS1)
          (containsInformation ?OBJ1 ?INFO))))))

(instance equivalentContentInstance EquivalenceRelation)
(domain equivalentContentInstance 1 ContentBearingPhysical)
(domain equivalentContentInstance 2 ContentBearingPhysical)
(relatedInternalConcept equivalentContentInstance equivalentContentClass)

(documentation equivalentContentInstance EnglishLanguage "A &%BinaryPredicate relating two
instances of &%ContentBearingPhysical.  (&%equivalentContentInstance
?OBJ1 ?OBJ2) means that the content expressed by ?OBJ1 is identical to
the content expressed by ?OBJ2.  An example would be the relationship
between a handwritten draft of a letter to one's lawyer and a typed
copy of the same letter.  Note that (&%equivalentContentInstance ?OBJ1
?OBJ2) implies (&%subsumesContentInstance ?OBJ1 ?OBJ2) and
(&%subsumesContentInstance ?OBJ2 ?OBJ2).")

(<=>
   (and
      (subsumesContentInstance ?OBJ1 ?OBJ2)
      (subsumesContentInstance ?OBJ2 ?OBJ1))
   (equivalentContentInstance ?OBJ1 ?OBJ2))

(instance subsumesContentInstance BinaryPredicate)
(instance subsumesContentInstance PartialOrderingRelation)
(domain subsumesContentInstance 1 ContentBearingPhysical)
(domain subsumesContentInstance 2 ContentBearingPhysical)
(relatedInternalConcept subsumesContentInstance subsumesContentClass)

(documentation subsumesContentInstance EnglishLanguage "A &%BinaryPredicate relating two
instances of &%ContentBearingPhysical.  (&%subsumesContentInstance ?OBJ1 ?OBJ2)
means that the content expressed by ?OBJ2 is part of the content expressed
by ?OBJ1.  An example is the relationship between a handwritten poem and
one of its stanzas.  Note that this is a relation between instances,
rather than &%Classes.  If one wants to assert a content relationship
between &%Classes, e.g. between the version of an intellectual work and a
part of that work, the relation &%subsumesContentClass should be used.")

(=>
   (subsumesContentInstance ?OBJ1 ?OBJ2)
   (forall (?INFO)
      (=>
         (containsInformation ?OBJ2 ?INFO)
         (containsInformation ?OBJ1 ?INFO))))

(subrelation realization represents)
(instance realization AsymmetricRelation)
(domain realization 1 Process)
(domain realization 2 Proposition)
(relatedInternalConcept realization equivalentContentInstance)
(relatedInternalConcept realization containsInformation)

(documentation realization EnglishLanguage "A subrelation of &%represents.
(&%realization ?PROCESS ?PROP) means that ?PROCESS is a Process which
expresses the content of ?PROP. Examples include a particular musical
performance, which realizes the content of a musical score, or the
reading of a poem.")

(=>
   (realization ?PROCESS ?PROP)
   (exists (?OBJ)
      (and
         (instance ?OBJ ContentBearingObject)
         (containsInformation ?OBJ ?PROP))))

(instance expressedInLanguage BinaryPredicate)
(instance expressedInLanguage AsymmetricRelation)
(domain expressedInLanguage 1 LinguisticExpression)
(domain expressedInLanguage 2 Language)

(documentation expressedInLanguage EnglishLanguage "(&%expressedInLanguage ?EXPRESS ?LANG)
means that the &%LinguisticExpression ?EXPRESS is part of the &%Language
?LANG.")

(<=>
  (expressedInLanguage ?EXPRESS ?LANGUAGE)
  (exists (?PROP)
    (representsInLanguage ?EXPRESS ?PROP ?LANGUAGE)))

(instance subProposition BinaryPredicate)
(instance subProposition TransitiveRelation)
(instance subProposition IrreflexiveRelation)
(instance subProposition PartialValuedRelation)
(domain subProposition 1 Proposition)
(domain subProposition 2 Proposition)

(documentation subProposition EnglishLanguage "(&%subProposition ?PROP1 ?PROP2) means that
?PROP1 is a &%Proposition which is a proper part of the &%Proposition ?PROP2.
In other words, &%subProposition is the analogue of &%properPart for chunks
of abstract content.")

(=>
   (subProposition ?PROP1 ?PROP2)
   (forall (?OBJ1 ?OBJ2)
      (=>
         (and
            (containsInformation ?OBJ1 ?PROP1)
            (containsInformation ?OBJ2 ?PROP2))
         (subsumesContentInstance ?OBJ2 ?OBJ1))))

(subrelation subPlan subProposition)
(instance subPlan TransitiveRelation)
(instance subPlan IrreflexiveRelation)
(instance subPlan PartialValuedRelation)
(domain subPlan 1 Plan)
(domain subPlan 2 Plan)

(documentation subPlan EnglishLanguage "(&%subPlan ?PLAN1 ?PLAN2) means that ?PLAN1
is a &%Plan which is a proper part of ?PLAN2.  This relation is generally
used to relate a supporting &%Plan to the overall &%Plan in a particular
context.")

(instance uses BinaryPredicate)
(instance uses AsymmetricRelation)
(domain uses 1 Object)
(domain uses 2 Agent)

(documentation uses EnglishLanguage "(&%uses ?OBJECT AGENT) means that ?OBJECT is used by
?AGENT as an instrument in an unspecified &%Process.  This &%Predicate,
as its corresponding axiom indicates, is a composition of the &%CaseRoles
&%agent and &%instrument.")

(=>
  (uses ?OBJ ?AGENT)
  (exists (?PROC)
    (and
      (agent ?PROC ?AGENT)
      (instrument ?PROC ?OBJ))))

;; END FILE

